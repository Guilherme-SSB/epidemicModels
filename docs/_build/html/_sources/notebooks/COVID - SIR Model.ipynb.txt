{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Os dados\n",
    "\n",
    "Lendo e visualizandos os dados do Brasil do COVID at√© "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>country</th>\n",
       "      <th>state</th>\n",
       "      <th>city</th>\n",
       "      <th>newDeaths</th>\n",
       "      <th>deaths</th>\n",
       "      <th>newCases</th>\n",
       "      <th>totalCases</th>\n",
       "      <th>deathsMS</th>\n",
       "      <th>totalCasesMS</th>\n",
       "      <th>deaths_per_100k_inhabitants</th>\n",
       "      <th>totalCases_per_100k_inhabitants</th>\n",
       "      <th>deaths_by_totalCases</th>\n",
       "      <th>recovered</th>\n",
       "      <th>suspects</th>\n",
       "      <th>tests</th>\n",
       "      <th>tests_per_100k_inhabitants</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-02-25</td>\n",
       "      <td>Brazil</td>\n",
       "      <td>SP</td>\n",
       "      <td>TOTAL</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00218</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-02-25</td>\n",
       "      <td>Brazil</td>\n",
       "      <td>TOTAL</td>\n",
       "      <td>TOTAL</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00048</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-02-26</td>\n",
       "      <td>Brazil</td>\n",
       "      <td>SP</td>\n",
       "      <td>TOTAL</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00218</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-02-26</td>\n",
       "      <td>Brazil</td>\n",
       "      <td>TOTAL</td>\n",
       "      <td>TOTAL</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00048</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-02-27</td>\n",
       "      <td>Brazil</td>\n",
       "      <td>SP</td>\n",
       "      <td>TOTAL</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00218</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         date country  state   city  newDeaths  deaths  newCases  totalCases  \\\n",
       "0  2020-02-25  Brazil     SP  TOTAL          0       0         1           1   \n",
       "1  2020-02-25  Brazil  TOTAL  TOTAL          0       0         1           1   \n",
       "2  2020-02-26  Brazil     SP  TOTAL          0       0         0           1   \n",
       "3  2020-02-26  Brazil  TOTAL  TOTAL          0       0         0           1   \n",
       "4  2020-02-27  Brazil     SP  TOTAL          0       0         0           1   \n",
       "\n",
       "   deathsMS  totalCasesMS  deaths_per_100k_inhabitants  \\\n",
       "0         0             0                          0.0   \n",
       "1         0             0                          0.0   \n",
       "2         0             1                          0.0   \n",
       "3         0             1                          0.0   \n",
       "4         0             1                          0.0   \n",
       "\n",
       "   totalCases_per_100k_inhabitants  deaths_by_totalCases  recovered  suspects  \\\n",
       "0                          0.00218                   0.0        NaN       NaN   \n",
       "1                          0.00048                   0.0        NaN       NaN   \n",
       "2                          0.00218                   0.0        NaN       NaN   \n",
       "3                          0.00048                   0.0        NaN       NaN   \n",
       "4                          0.00218                   0.0        NaN       NaN   \n",
       "\n",
       "   tests  tests_per_100k_inhabitants  \n",
       "0    NaN                         NaN  \n",
       "1    NaN                         NaN  \n",
       "2    NaN                         NaN  \n",
       "3    NaN                         NaN  \n",
       "4    NaN                         NaN  "
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "import pandas as pd\n",
    "\n",
    "# Lendo o arquivo csv\n",
    "data_path = './PG_IMT/DadosEpidemia/CoVid19.csv'\n",
    "\n",
    "BRdata = pd.read_csv(data_path) \n",
    "BRdata.head()\n",
    "\n",
    "# Lendo os dados online\n",
    "data_path = 'https://raw.githubusercontent.com/wcota/covid19br/master/cases-brazil-states.csv'\n",
    "\n",
    "SPdata = pd.read_csv(data_path, delimiter=\",\") \n",
    "SPdata.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Filtrando e limpando os dados"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>country</th>\n",
       "      <th>state</th>\n",
       "      <th>city</th>\n",
       "      <th>newDeaths</th>\n",
       "      <th>deaths</th>\n",
       "      <th>newCases</th>\n",
       "      <th>totalCases</th>\n",
       "      <th>deathsMS</th>\n",
       "      <th>totalCasesMS</th>\n",
       "      <th>deaths_per_100k_inhabitants</th>\n",
       "      <th>totalCases_per_100k_inhabitants</th>\n",
       "      <th>deaths_by_totalCases</th>\n",
       "      <th>recovered</th>\n",
       "      <th>suspects</th>\n",
       "      <th>tests</th>\n",
       "      <th>tests_per_100k_inhabitants</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>347</th>\n",
       "      <td>2020-03-24</td>\n",
       "      <td>Brazil</td>\n",
       "      <td>SP</td>\n",
       "      <td>TOTAL</td>\n",
       "      <td>10</td>\n",
       "      <td>40</td>\n",
       "      <td>65</td>\n",
       "      <td>810</td>\n",
       "      <td>40</td>\n",
       "      <td>810</td>\n",
       "      <td>0.08711</td>\n",
       "      <td>1.76397</td>\n",
       "      <td>0.04938</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4572.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>375</th>\n",
       "      <td>2020-03-25</td>\n",
       "      <td>Brazil</td>\n",
       "      <td>SP</td>\n",
       "      <td>TOTAL</td>\n",
       "      <td>8</td>\n",
       "      <td>48</td>\n",
       "      <td>52</td>\n",
       "      <td>862</td>\n",
       "      <td>48</td>\n",
       "      <td>862</td>\n",
       "      <td>0.10453</td>\n",
       "      <td>1.87722</td>\n",
       "      <td>0.05568</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4300.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>403</th>\n",
       "      <td>2020-03-26</td>\n",
       "      <td>Brazil</td>\n",
       "      <td>SP</td>\n",
       "      <td>TOTAL</td>\n",
       "      <td>10</td>\n",
       "      <td>58</td>\n",
       "      <td>191</td>\n",
       "      <td>1053</td>\n",
       "      <td>58</td>\n",
       "      <td>1052</td>\n",
       "      <td>0.12631</td>\n",
       "      <td>2.29317</td>\n",
       "      <td>0.05508</td>\n",
       "      <td>1.0</td>\n",
       "      <td>14312.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>431</th>\n",
       "      <td>2020-03-27</td>\n",
       "      <td>Brazil</td>\n",
       "      <td>SP</td>\n",
       "      <td>TOTAL</td>\n",
       "      <td>10</td>\n",
       "      <td>68</td>\n",
       "      <td>170</td>\n",
       "      <td>1223</td>\n",
       "      <td>68</td>\n",
       "      <td>1223</td>\n",
       "      <td>0.14809</td>\n",
       "      <td>2.66338</td>\n",
       "      <td>0.05560</td>\n",
       "      <td>1.0</td>\n",
       "      <td>14312.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>459</th>\n",
       "      <td>2020-03-28</td>\n",
       "      <td>Brazil</td>\n",
       "      <td>SP</td>\n",
       "      <td>TOTAL</td>\n",
       "      <td>16</td>\n",
       "      <td>84</td>\n",
       "      <td>183</td>\n",
       "      <td>1406</td>\n",
       "      <td>84</td>\n",
       "      <td>1406</td>\n",
       "      <td>0.18293</td>\n",
       "      <td>3.06191</td>\n",
       "      <td>0.05974</td>\n",
       "      <td>1.0</td>\n",
       "      <td>14312.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           date country state   city  newDeaths  deaths  newCases  totalCases  \\\n",
       "347  2020-03-24  Brazil    SP  TOTAL         10      40        65         810   \n",
       "375  2020-03-25  Brazil    SP  TOTAL          8      48        52         862   \n",
       "403  2020-03-26  Brazil    SP  TOTAL         10      58       191        1053   \n",
       "431  2020-03-27  Brazil    SP  TOTAL         10      68       170        1223   \n",
       "459  2020-03-28  Brazil    SP  TOTAL         16      84       183        1406   \n",
       "\n",
       "     deathsMS  totalCasesMS  deaths_per_100k_inhabitants  \\\n",
       "347        40           810                      0.08711   \n",
       "375        48           862                      0.10453   \n",
       "403        58          1052                      0.12631   \n",
       "431        68          1223                      0.14809   \n",
       "459        84          1406                      0.18293   \n",
       "\n",
       "     totalCases_per_100k_inhabitants  deaths_by_totalCases  recovered  \\\n",
       "347                          1.76397               0.04938        1.0   \n",
       "375                          1.87722               0.05568        1.0   \n",
       "403                          2.29317               0.05508        1.0   \n",
       "431                          2.66338               0.05560        1.0   \n",
       "459                          3.06191               0.05974        1.0   \n",
       "\n",
       "     suspects  tests  tests_per_100k_inhabitants  \n",
       "347    4572.0    NaN                         NaN  \n",
       "375    4300.0    NaN                         NaN  \n",
       "403   14312.0    NaN                         NaN  \n",
       "431   14312.0    NaN                         NaN  \n",
       "459   14312.0    NaN                         NaN  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "is_TOTAL = BRdata['state']=='TOTAL'\n",
    "BRdata = BRdata[is_TOTAL]\n",
    "\n",
    "BRLimpo = BRdata[BRdata.recovered.notnull()]\n",
    "BRLimpo.head()\n",
    "\n",
    "\n",
    "\n",
    "is_state = SPdata['state']==\"SP\"\n",
    "SPdata = SPdata[is_state]\n",
    "\n",
    "SPdata = SPdata[SPdata.recovered.notnull()]\n",
    "SPdata.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "import numpy as np\n",
    "from datetime import datetime\n",
    "\n",
    "only_SP = True\n",
    "\n",
    "first_date = SPdata[\"date\"].iloc[0]\n",
    "first_date = datetime.fromisoformat(first_date)\n",
    "\n",
    "if only_SP:\n",
    "    \n",
    "    N = 11869660\n",
    "    \n",
    "    I = SPdata[\"totalCases\"].to_numpy()\n",
    "    M = SPdata[\"deaths\"].to_numpy()\n",
    "    R = SPdata[\"recovered\"].to_numpy()\n",
    "    \n",
    "else:\n",
    "    \n",
    "    N = 220e6\n",
    "\n",
    "    SIR = BRLimpo[[ \"totalCases\", \"deaths\",\"recovered\"]].to_numpy()\n",
    "\n",
    "    I = SIR[:,0]\n",
    "    M = SIR[:,1]\n",
    "    R = SIR[:,2]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualizando a evolu√ß√£o"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "    <div class=\"bk-root\">\n",
       "        <a href=\"https://bokeh.org\" target=\"_blank\" class=\"bk-logo bk-logo-small bk-logo-notebook\"></a>\n",
       "        <span id=\"1001\">Loading BokehJS ...</span>\n",
       "    </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "(function(root) {\n",
       "  function now() {\n",
       "    return new Date();\n",
       "  }\n",
       "\n",
       "  var force = true;\n",
       "\n",
       "  if (typeof root._bokeh_onload_callbacks === \"undefined\" || force === true) {\n",
       "    root._bokeh_onload_callbacks = [];\n",
       "    root._bokeh_is_loading = undefined;\n",
       "  }\n",
       "\n",
       "  var JS_MIME_TYPE = 'application/javascript';\n",
       "  var HTML_MIME_TYPE = 'text/html';\n",
       "  var EXEC_MIME_TYPE = 'application/vnd.bokehjs_exec.v0+json';\n",
       "  var CLASS_NAME = 'output_bokeh rendered_html';\n",
       "\n",
       "  /**\n",
       "   * Render data to the DOM node\n",
       "   */\n",
       "  function render(props, node) {\n",
       "    var script = document.createElement(\"script\");\n",
       "    node.appendChild(script);\n",
       "  }\n",
       "\n",
       "  /**\n",
       "   * Handle when an output is cleared or removed\n",
       "   */\n",
       "  function handleClearOutput(event, handle) {\n",
       "    var cell = handle.cell;\n",
       "\n",
       "    var id = cell.output_area._bokeh_element_id;\n",
       "    var server_id = cell.output_area._bokeh_server_id;\n",
       "    // Clean up Bokeh references\n",
       "    if (id != null && id in Bokeh.index) {\n",
       "      Bokeh.index[id].model.document.clear();\n",
       "      delete Bokeh.index[id];\n",
       "    }\n",
       "\n",
       "    if (server_id !== undefined) {\n",
       "      // Clean up Bokeh references\n",
       "      var cmd = \"from bokeh.io.state import curstate; print(curstate().uuid_to_server['\" + server_id + \"'].get_sessions()[0].document.roots[0]._id)\";\n",
       "      cell.notebook.kernel.execute(cmd, {\n",
       "        iopub: {\n",
       "          output: function(msg) {\n",
       "            var id = msg.content.text.trim();\n",
       "            if (id in Bokeh.index) {\n",
       "              Bokeh.index[id].model.document.clear();\n",
       "              delete Bokeh.index[id];\n",
       "            }\n",
       "          }\n",
       "        }\n",
       "      });\n",
       "      // Destroy server and session\n",
       "      var cmd = \"import bokeh.io.notebook as ion; ion.destroy_server('\" + server_id + \"')\";\n",
       "      cell.notebook.kernel.execute(cmd);\n",
       "    }\n",
       "  }\n",
       "\n",
       "  /**\n",
       "   * Handle when a new output is added\n",
       "   */\n",
       "  function handleAddOutput(event, handle) {\n",
       "    var output_area = handle.output_area;\n",
       "    var output = handle.output;\n",
       "\n",
       "    // limit handleAddOutput to display_data with EXEC_MIME_TYPE content only\n",
       "    if ((output.output_type != \"display_data\") || (!output.data.hasOwnProperty(EXEC_MIME_TYPE))) {\n",
       "      return\n",
       "    }\n",
       "\n",
       "    var toinsert = output_area.element.find(\".\" + CLASS_NAME.split(' ')[0]);\n",
       "\n",
       "    if (output.metadata[EXEC_MIME_TYPE][\"id\"] !== undefined) {\n",
       "      toinsert[toinsert.length - 1].firstChild.textContent = output.data[JS_MIME_TYPE];\n",
       "      // store reference to embed id on output_area\n",
       "      output_area._bokeh_element_id = output.metadata[EXEC_MIME_TYPE][\"id\"];\n",
       "    }\n",
       "    if (output.metadata[EXEC_MIME_TYPE][\"server_id\"] !== undefined) {\n",
       "      var bk_div = document.createElement(\"div\");\n",
       "      bk_div.innerHTML = output.data[HTML_MIME_TYPE];\n",
       "      var script_attrs = bk_div.children[0].attributes;\n",
       "      for (var i = 0; i < script_attrs.length; i++) {\n",
       "        toinsert[toinsert.length - 1].firstChild.setAttribute(script_attrs[i].name, script_attrs[i].value);\n",
       "        toinsert[toinsert.length - 1].firstChild.textContent = bk_div.children[0].textContent\n",
       "      }\n",
       "      // store reference to server id on output_area\n",
       "      output_area._bokeh_server_id = output.metadata[EXEC_MIME_TYPE][\"server_id\"];\n",
       "    }\n",
       "  }\n",
       "\n",
       "  function register_renderer(events, OutputArea) {\n",
       "\n",
       "    function append_mime(data, metadata, element) {\n",
       "      // create a DOM node to render to\n",
       "      var toinsert = this.create_output_subarea(\n",
       "        metadata,\n",
       "        CLASS_NAME,\n",
       "        EXEC_MIME_TYPE\n",
       "      );\n",
       "      this.keyboard_manager.register_events(toinsert);\n",
       "      // Render to node\n",
       "      var props = {data: data, metadata: metadata[EXEC_MIME_TYPE]};\n",
       "      render(props, toinsert[toinsert.length - 1]);\n",
       "      element.append(toinsert);\n",
       "      return toinsert\n",
       "    }\n",
       "\n",
       "    /* Handle when an output is cleared or removed */\n",
       "    events.on('clear_output.CodeCell', handleClearOutput);\n",
       "    events.on('delete.Cell', handleClearOutput);\n",
       "\n",
       "    /* Handle when a new output is added */\n",
       "    events.on('output_added.OutputArea', handleAddOutput);\n",
       "\n",
       "    /**\n",
       "     * Register the mime type and append_mime function with output_area\n",
       "     */\n",
       "    OutputArea.prototype.register_mime_type(EXEC_MIME_TYPE, append_mime, {\n",
       "      /* Is output safe? */\n",
       "      safe: true,\n",
       "      /* Index of renderer in `output_area.display_order` */\n",
       "      index: 0\n",
       "    });\n",
       "  }\n",
       "\n",
       "  // register the mime type if in Jupyter Notebook environment and previously unregistered\n",
       "  if (root.Jupyter !== undefined) {\n",
       "    var events = require('base/js/events');\n",
       "    var OutputArea = require('notebook/js/outputarea').OutputArea;\n",
       "\n",
       "    if (OutputArea.prototype.mime_types().indexOf(EXEC_MIME_TYPE) == -1) {\n",
       "      register_renderer(events, OutputArea);\n",
       "    }\n",
       "  }\n",
       "\n",
       "  \n",
       "  if (typeof (root._bokeh_timeout) === \"undefined\" || force === true) {\n",
       "    root._bokeh_timeout = Date.now() + 5000;\n",
       "    root._bokeh_failed_load = false;\n",
       "  }\n",
       "\n",
       "  var NB_LOAD_WARNING = {'data': {'text/html':\n",
       "     \"<div style='background-color: #fdd'>\\n\"+\n",
       "     \"<p>\\n\"+\n",
       "     \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n",
       "     \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n",
       "     \"</p>\\n\"+\n",
       "     \"<ul>\\n\"+\n",
       "     \"<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n\"+\n",
       "     \"<li>use INLINE resources instead, as so:</li>\\n\"+\n",
       "     \"</ul>\\n\"+\n",
       "     \"<code>\\n\"+\n",
       "     \"from bokeh.resources import INLINE\\n\"+\n",
       "     \"output_notebook(resources=INLINE)\\n\"+\n",
       "     \"</code>\\n\"+\n",
       "     \"</div>\"}};\n",
       "\n",
       "  function display_loaded() {\n",
       "    var el = document.getElementById(\"1001\");\n",
       "    if (el != null) {\n",
       "      el.textContent = \"BokehJS is loading...\";\n",
       "    }\n",
       "    if (root.Bokeh !== undefined) {\n",
       "      if (el != null) {\n",
       "        el.textContent = \"BokehJS \" + root.Bokeh.version + \" successfully loaded.\";\n",
       "      }\n",
       "    } else if (Date.now() < root._bokeh_timeout) {\n",
       "      setTimeout(display_loaded, 100)\n",
       "    }\n",
       "  }\n",
       "\n",
       "\n",
       "  function run_callbacks() {\n",
       "    try {\n",
       "      root._bokeh_onload_callbacks.forEach(function(callback) {\n",
       "        if (callback != null)\n",
       "          callback();\n",
       "      });\n",
       "    } finally {\n",
       "      delete root._bokeh_onload_callbacks\n",
       "    }\n",
       "    console.debug(\"Bokeh: all callbacks have finished\");\n",
       "  }\n",
       "\n",
       "  function load_libs(css_urls, js_urls, callback) {\n",
       "    if (css_urls == null) css_urls = [];\n",
       "    if (js_urls == null) js_urls = [];\n",
       "\n",
       "    root._bokeh_onload_callbacks.push(callback);\n",
       "    if (root._bokeh_is_loading > 0) {\n",
       "      console.debug(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n",
       "      return null;\n",
       "    }\n",
       "    if (js_urls == null || js_urls.length === 0) {\n",
       "      run_callbacks();\n",
       "      return null;\n",
       "    }\n",
       "    console.debug(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n",
       "    root._bokeh_is_loading = css_urls.length + js_urls.length;\n",
       "\n",
       "    function on_load() {\n",
       "      root._bokeh_is_loading--;\n",
       "      if (root._bokeh_is_loading === 0) {\n",
       "        console.debug(\"Bokeh: all BokehJS libraries/stylesheets loaded\");\n",
       "        run_callbacks()\n",
       "      }\n",
       "    }\n",
       "\n",
       "    function on_error() {\n",
       "      console.error(\"failed to load \" + url);\n",
       "    }\n",
       "\n",
       "    for (var i = 0; i < css_urls.length; i++) {\n",
       "      var url = css_urls[i];\n",
       "      const element = document.createElement(\"link\");\n",
       "      element.onload = on_load;\n",
       "      element.onerror = on_error;\n",
       "      element.rel = \"stylesheet\";\n",
       "      element.type = \"text/css\";\n",
       "      element.href = url;\n",
       "      console.debug(\"Bokeh: injecting link tag for BokehJS stylesheet: \", url);\n",
       "      document.body.appendChild(element);\n",
       "    }\n",
       "\n",
       "    const hashes = {\"https://cdn.bokeh.org/bokeh/release/bokeh-2.0.1.min.js\": \"JpP8FXbgAZLkfur7LiK3j9AGBhHNIvF742meBJrjO2ShJDhCG2I1uVvW+0DUtrmc\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.0.1.min.js\": \"xZlADit0Q04ISQEdKg2k3L4W9AwQBAuDs9nJL9fM/WwzL1tEU9VPNezOFX0nLEAz\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.0.1.min.js\": \"4BuPRZkdMKSnj3zoxiNrQ86XgNw0rYmBOxe7nshquXwwcauupgBF2DHLVG1WuZlV\", \"https://cdn.bokeh.org/bokeh/release/bokeh-gl-2.0.1.min.js\": \"Dv1SQ87hmDqK6S5OhBf0bCuwAEvL5QYL0PuR/F1SPVhCS/r/abjkbpKDYL2zeM19\"};\n",
       "\n",
       "    for (var i = 0; i < js_urls.length; i++) {\n",
       "      var url = js_urls[i];\n",
       "      var element = document.createElement('script');\n",
       "      element.onload = on_load;\n",
       "      element.onerror = on_error;\n",
       "      element.async = false;\n",
       "      element.src = url;\n",
       "      if (url in hashes) {\n",
       "        element.crossOrigin = \"anonymous\";\n",
       "        element.integrity = \"sha384-\" + hashes[url];\n",
       "      }\n",
       "      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n",
       "      document.head.appendChild(element);\n",
       "    }\n",
       "  };var element = document.getElementById(\"1001\");\n",
       "  if (element == null) {\n",
       "    console.error(\"Bokeh: ERROR: autoload.js configured with elementid '1001' but no matching script tag was found. \")\n",
       "    return false;\n",
       "  }\n",
       "\n",
       "  function inject_raw_css(css) {\n",
       "    const element = document.createElement(\"style\");\n",
       "    element.appendChild(document.createTextNode(css));\n",
       "    document.body.appendChild(element);\n",
       "  }\n",
       "\n",
       "  \n",
       "  var js_urls = [\"https://cdn.bokeh.org/bokeh/release/bokeh-2.0.1.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.0.1.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.0.1.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-gl-2.0.1.min.js\"];\n",
       "  var css_urls = [];\n",
       "  \n",
       "\n",
       "  var inline_js = [\n",
       "    function(Bokeh) {\n",
       "      Bokeh.set_log_level(\"info\");\n",
       "    },\n",
       "    function(Bokeh) {\n",
       "    \n",
       "    \n",
       "    }\n",
       "  ];\n",
       "\n",
       "  function run_inline_js() {\n",
       "    \n",
       "    if (root.Bokeh !== undefined || force === true) {\n",
       "      \n",
       "    for (var i = 0; i < inline_js.length; i++) {\n",
       "      inline_js[i].call(root, root.Bokeh);\n",
       "    }\n",
       "    if (force === true) {\n",
       "        display_loaded();\n",
       "      }} else if (Date.now() < root._bokeh_timeout) {\n",
       "      setTimeout(run_inline_js, 100);\n",
       "    } else if (!root._bokeh_failed_load) {\n",
       "      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n",
       "      root._bokeh_failed_load = true;\n",
       "    } else if (force !== true) {\n",
       "      var cell = $(document.getElementById(\"1001\")).parents('.cell').data().cell;\n",
       "      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n",
       "    }\n",
       "\n",
       "  }\n",
       "\n",
       "  if (root._bokeh_is_loading === 0) {\n",
       "    console.debug(\"Bokeh: BokehJS loaded, going straight to plotting\");\n",
       "    run_inline_js();\n",
       "  } else {\n",
       "    load_libs(css_urls, js_urls, function() {\n",
       "      console.debug(\"Bokeh: BokehJS plotting callback run at\", now());\n",
       "      run_inline_js();\n",
       "    });\n",
       "  }\n",
       "}(window));"
      ],
      "application/vnd.bokehjs_load.v0+json": "\n(function(root) {\n  function now() {\n    return new Date();\n  }\n\n  var force = true;\n\n  if (typeof root._bokeh_onload_callbacks === \"undefined\" || force === true) {\n    root._bokeh_onload_callbacks = [];\n    root._bokeh_is_loading = undefined;\n  }\n\n  \n\n  \n  if (typeof (root._bokeh_timeout) === \"undefined\" || force === true) {\n    root._bokeh_timeout = Date.now() + 5000;\n    root._bokeh_failed_load = false;\n  }\n\n  var NB_LOAD_WARNING = {'data': {'text/html':\n     \"<div style='background-color: #fdd'>\\n\"+\n     \"<p>\\n\"+\n     \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n     \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n     \"</p>\\n\"+\n     \"<ul>\\n\"+\n     \"<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n\"+\n     \"<li>use INLINE resources instead, as so:</li>\\n\"+\n     \"</ul>\\n\"+\n     \"<code>\\n\"+\n     \"from bokeh.resources import INLINE\\n\"+\n     \"output_notebook(resources=INLINE)\\n\"+\n     \"</code>\\n\"+\n     \"</div>\"}};\n\n  function display_loaded() {\n    var el = document.getElementById(\"1001\");\n    if (el != null) {\n      el.textContent = \"BokehJS is loading...\";\n    }\n    if (root.Bokeh !== undefined) {\n      if (el != null) {\n        el.textContent = \"BokehJS \" + root.Bokeh.version + \" successfully loaded.\";\n      }\n    } else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(display_loaded, 100)\n    }\n  }\n\n\n  function run_callbacks() {\n    try {\n      root._bokeh_onload_callbacks.forEach(function(callback) {\n        if (callback != null)\n          callback();\n      });\n    } finally {\n      delete root._bokeh_onload_callbacks\n    }\n    console.debug(\"Bokeh: all callbacks have finished\");\n  }\n\n  function load_libs(css_urls, js_urls, callback) {\n    if (css_urls == null) css_urls = [];\n    if (js_urls == null) js_urls = [];\n\n    root._bokeh_onload_callbacks.push(callback);\n    if (root._bokeh_is_loading > 0) {\n      console.debug(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n      return null;\n    }\n    if (js_urls == null || js_urls.length === 0) {\n      run_callbacks();\n      return null;\n    }\n    console.debug(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n    root._bokeh_is_loading = css_urls.length + js_urls.length;\n\n    function on_load() {\n      root._bokeh_is_loading--;\n      if (root._bokeh_is_loading === 0) {\n        console.debug(\"Bokeh: all BokehJS libraries/stylesheets loaded\");\n        run_callbacks()\n      }\n    }\n\n    function on_error() {\n      console.error(\"failed to load \" + url);\n    }\n\n    for (var i = 0; i < css_urls.length; i++) {\n      var url = css_urls[i];\n      const element = document.createElement(\"link\");\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.rel = \"stylesheet\";\n      element.type = \"text/css\";\n      element.href = url;\n      console.debug(\"Bokeh: injecting link tag for BokehJS stylesheet: \", url);\n      document.body.appendChild(element);\n    }\n\n    const hashes = {\"https://cdn.bokeh.org/bokeh/release/bokeh-2.0.1.min.js\": \"JpP8FXbgAZLkfur7LiK3j9AGBhHNIvF742meBJrjO2ShJDhCG2I1uVvW+0DUtrmc\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.0.1.min.js\": \"xZlADit0Q04ISQEdKg2k3L4W9AwQBAuDs9nJL9fM/WwzL1tEU9VPNezOFX0nLEAz\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.0.1.min.js\": \"4BuPRZkdMKSnj3zoxiNrQ86XgNw0rYmBOxe7nshquXwwcauupgBF2DHLVG1WuZlV\", \"https://cdn.bokeh.org/bokeh/release/bokeh-gl-2.0.1.min.js\": \"Dv1SQ87hmDqK6S5OhBf0bCuwAEvL5QYL0PuR/F1SPVhCS/r/abjkbpKDYL2zeM19\"};\n\n    for (var i = 0; i < js_urls.length; i++) {\n      var url = js_urls[i];\n      var element = document.createElement('script');\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.async = false;\n      element.src = url;\n      if (url in hashes) {\n        element.crossOrigin = \"anonymous\";\n        element.integrity = \"sha384-\" + hashes[url];\n      }\n      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      document.head.appendChild(element);\n    }\n  };var element = document.getElementById(\"1001\");\n  if (element == null) {\n    console.error(\"Bokeh: ERROR: autoload.js configured with elementid '1001' but no matching script tag was found. \")\n    return false;\n  }\n\n  function inject_raw_css(css) {\n    const element = document.createElement(\"style\");\n    element.appendChild(document.createTextNode(css));\n    document.body.appendChild(element);\n  }\n\n  \n  var js_urls = [\"https://cdn.bokeh.org/bokeh/release/bokeh-2.0.1.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.0.1.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.0.1.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-gl-2.0.1.min.js\"];\n  var css_urls = [];\n  \n\n  var inline_js = [\n    function(Bokeh) {\n      Bokeh.set_log_level(\"info\");\n    },\n    function(Bokeh) {\n    \n    \n    }\n  ];\n\n  function run_inline_js() {\n    \n    if (root.Bokeh !== undefined || force === true) {\n      \n    for (var i = 0; i < inline_js.length; i++) {\n      inline_js[i].call(root, root.Bokeh);\n    }\n    if (force === true) {\n        display_loaded();\n      }} else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(run_inline_js, 100);\n    } else if (!root._bokeh_failed_load) {\n      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n      root._bokeh_failed_load = true;\n    } else if (force !== true) {\n      var cell = $(document.getElementById(\"1001\")).parents('.cell').data().cell;\n      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n    }\n\n  }\n\n  if (root._bokeh_is_loading === 0) {\n    console.debug(\"Bokeh: BokehJS loaded, going straight to plotting\");\n    run_inline_js();\n  } else {\n    load_libs(css_urls, js_urls, function() {\n      console.debug(\"Bokeh: BokehJS plotting callback run at\", now());\n      run_inline_js();\n    });\n  }\n}(window));"
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "  <div class=\"bk-root\" id=\"054bcdbc-f0fc-4c63-974b-04e574c25ca1\" data-root-id=\"1003\"></div>\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "(function(root) {\n",
       "  function embed_document(root) {\n",
       "    \n",
       "  var docs_json = {\"26288b89-f0d1-475f-9683-af42bf9ddcaa\":{\"roots\":{\"references\":[{\"attributes\":{\"below\":[{\"id\":\"1014\"}],\"center\":[{\"id\":\"1017\"},{\"id\":\"1021\"},{\"id\":\"1045\"}],\"left\":[{\"id\":\"1018\"}],\"plot_height\":500,\"renderers\":[{\"id\":\"1026\"},{\"id\":\"1050\"},{\"id\":\"1075\"}],\"title\":{\"id\":\"1004\"},\"toolbar\":{\"id\":\"1022\"},\"toolbar_location\":null,\"x_range\":{\"id\":\"1006\"},\"x_scale\":{\"id\":\"1010\"},\"y_range\":{\"id\":\"1008\"},\"y_scale\":{\"id\":\"1012\"}},\"id\":\"1003\",\"subtype\":\"Figure\",\"type\":\"Plot\"},{\"attributes\":{\"base\":60,\"mantissas\":[1,2,5,10,15,20,30],\"max_interval\":1800000.0,\"min_interval\":1000.0,\"num_minor_ticks\":0},\"id\":\"1034\",\"type\":\"AdaptiveTicker\"},{\"attributes\":{\"label\":{\"value\":\"Removidos\"},\"renderers\":[{\"id\":\"1075\"}]},\"id\":\"1096\",\"type\":\"LegendItem\"},{\"attributes\":{\"days\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]},\"id\":\"1036\",\"type\":\"DaysTicker\"},{\"attributes\":{\"line_cap\":\"round\",\"line_color\":\"#99d594\",\"line_width\":3,\"x\":{\"field\":\"Data\"},\"y\":{\"field\":\"Removidos\"}},\"id\":\"1073\",\"type\":\"Line\"},{\"attributes\":{\"line_alpha\":0.1,\"line_cap\":\"round\",\"line_color\":\"#99d594\",\"line_width\":3,\"x\":{\"field\":\"Data\"},\"y\":{\"field\":\"Removidos\"}},\"id\":\"1074\",\"type\":\"Line\"},{\"attributes\":{\"days\":[1,4,7,10,13,16,19,22,25,28]},\"id\":\"1037\",\"type\":\"DaysTicker\"},{\"attributes\":{\"text\":\"Evolu\\u00e7\\u00e3o do COVID - Brasil\"},\"id\":\"1004\",\"type\":\"Title\"},{\"attributes\":{\"label\":{\"value\":\"Mortes\"},\"renderers\":[{\"id\":\"1050\"}]},\"id\":\"1071\",\"type\":\"LegendItem\"},{\"attributes\":{\"days\":[1,8,15,22]},\"id\":\"1038\",\"type\":\"DaysTicker\"},{\"attributes\":{},\"id\":\"1029\",\"type\":\"DatetimeTickFormatter\"},{\"attributes\":{\"line_cap\":\"round\",\"line_color\":\"#de425b\",\"line_width\":3,\"x\":{\"field\":\"Data\"},\"y\":{\"field\":\"Mortes\"}},\"id\":\"1048\",\"type\":\"Line\"},{\"attributes\":{\"days\":[1,15]},\"id\":\"1039\",\"type\":\"DaysTicker\"},{\"attributes\":{},\"id\":\"1069\",\"type\":\"Selection\"},{\"attributes\":{\"source\":{\"id\":\"1002\"}},\"id\":\"1076\",\"type\":\"CDSView\"},{\"attributes\":{},\"id\":\"1010\",\"type\":\"LinearScale\"},{\"attributes\":{\"months\":[0,1,2,3,4,5,6,7,8,9,10,11]},\"id\":\"1040\",\"type\":\"MonthsTicker\"},{\"attributes\":{},\"id\":\"1008\",\"type\":\"DataRange1d\"},{\"attributes\":{\"data\":{\"Data\":[1585008000000.0,1585094400000.0,1585180800000.0,1585267200000.0,1585353600000.0,1585440000000.0,1585526400000.0,1585612800000.0,1585699200000.0,1585785600000.0,1585872000000.0,1585958400000.0,1586044800000.0,1586131200000.0,1586217600000.0,1586304000000.0,1586390400000.0,1586476800000.0,1586563200000.0,1586649600000.0,1586736000000.0,1586822400000.0,1586908800000.0,1586995200000.0,1587081600000.0,1587168000000.0,1587254400000.0,1587340800000.0,1587427200000.0,1587513600000.0,1587600000000.0,1587686400000.0,1587772800000.0,1587859200000.0,1587945600000.0,1588032000000.0,1588118400000.0,1588204800000.0,1588291200000.0,1588377600000.0,1588464000000.0,1588550400000.0,1588636800000.0,1588723200000.0,1588809600000.0,1588896000000.0,1588982400000.0,1589068800000.0,1589155200000.0,1589241600000.0,1589328000000.0,1589414400000.0,1589500800000.0,1589587200000.0,1589673600000.0,1589760000000.0,1589846400000.0,1589932800000.0,1590019200000.0,1590105600000.0,1590192000000.0,1590278400000.0,1590364800000.0,1590451200000.0,1590537600000.0],\"Infectados\":[810,862,1053,1223,1406,1451,1517,2339,2981,3506,4048,4466,4620,4866,5682,6708,7480,8216,8419,8755,8895,9371,11043,11568,12841,13894,14267,14580,15385,15914,16740,17826,20004,20715,21696,24041,26158,28698,30374,31174,31772,32187,34053,37853,39928,41830,44411,45444,46131,47719,51097,54286,58378,61183,62345,63066,65995,69859,73739,76871,80558,82161,83625,86017,86017],\"Mortes\":[40,48,58,68,84,98,113,136,164,188,219,260,275,304,371,428,496,540,560,588,608,695,778,853,928,991,1015,1037,1093,1134,1345,1512,1667,1700,1825,2049,2247,2375,2511,2586,2627,2654,2851,3045,3206,3416,3608,3709,3743,3949,4118,4315,4501,4688,4782,4823,5147,5363,5558,5773,6045,6163,6220,6423,6423],\"Removidos\":{\"__ndarray__\":\"AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADgzUAAAAAAgBvQQAAAAACAa9BAAAAAAEAt0UAAAAAAQC3RQA==\",\"dtype\":\"float64\",\"shape\":[65]},\"d\":[\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\"],\"m\":[\"03\",\"03\",\"03\",\"03\",\"03\",\"03\",\"03\",\"03\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\"],\"y},\"selected\":{\"id\":\"1069\"},\"selection_policy\":{\"id\":\"1070\"}},\"id\":\"1002\",\"type\":\"ColumnDataSource\"},{\"attributes\":{\"mantissas\":[1,2,5],\"max_interval\":500.0,\"num_minor_ticks\":0},\"id\":\"1033\",\"type\":\"AdaptiveTicker\"},{\"attributes\":{\"months\":[0,2,4,6,8,10]},\"id\":\"1041\",\"type\":\"MonthsTicker\"},{\"attributes\":{},\"id\":\"1012\",\"type\":\"LogScale\"},{\"attributes\":{\"months\":[0,4,8]},\"id\":\"1042\",\"type\":\"MonthsTicker\"},{\"attributes\":{\"axis_label\":\"Indiv\\u00edduos\",\"formatter\":{\"id\":\"1031\"},\"ticker\":{\"id\":\"1019\"}},\"id\":\"1018\",\"type\":\"LogAxis\"},{\"attributes\":{\"axis_label\":\"Dias\",\"formatter\":{\"id\":\"1029\"},\"ticker\":{\"id\":\"1015\"}},\"id\":\"1014\",\"type\":\"DatetimeAxis\"},{\"attributes\":{\"months\":[0,6]},\"id\":\"1043\",\"type\":\"MonthsTicker\"},{\"attributes\":{\"active_drag\":\"auto\",\"active_inspect\":\"auto\",\"active_multi\":null,\"active_scroll\":\"auto\",\"active_tap\":\"auto\",\"tools\":[{\"id\":\"1097\"}]},\"id\":\"1022\",\"type\":\"Toolbar\"},{\"attributes\":{\"line_alpha\":0.1,\"line_cap\":\"round\",\"line_color\":\"#ffd885\",\"line_width\":3,\"x\":{\"field\":\"Data\"},\"y\":{\"field\":\"Infectados\"}},\"id\":\"1025\",\"type\":\"Line\"},{\"attributes\":{\"num_minor_ticks\":5,\"tickers\":[{\"id\":\"1033\"},{\"id\":\"1034\"},{\"id\":\"1035\"},{\"id\":\"1036\"},{\"id\":\"1037\"},{\"id\":\"1038\"},{\"id\":\"1039\"},{\"id\":\"1040\"},{\"id\":\"1041\"},{\"id\":\"1042\"},{\"id\":\"1043\"},{\"id\":\"1044\"}]},\"id\":\"1015\",\"type\":\"DatetimeTicker\"},{\"attributes\":{},\"id\":\"1044\",\"type\":\"YearsTicker\"},{\"attributes\":{\"label\":{\"value\":\"Infectados\"},\"renderers\":[{\"id\":\"1026\"}]},\"id\":\"1046\",\"type\":\"LegendItem\"},{\"attributes\":{\"axis\":{\"id\":\"1014\"},\"grid_line_alpha\":0,\"ticker\":null},\"id\":\"1017\",\"type\":\"Grid\"},{\"attributes\":{\"source\":{\"id\":\"1002\"}},\"id\":\"1027\",\"type\":\"CDSView\"},{\"attributes\":{\"data_source\":{\"id\":\"1002\"},\"glyph\":{\"id\":\"1024\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1025\"},\"selection_glyph\":null,\"view\":{\"id\":\"1027\"}},\"id\":\"1026\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"data_source\":{\"id\":\"1002\"},\"glyph\":{\"id\":\"1073\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1074\"},\"selection_glyph\":null,\"view\":{\"id\":\"1076\"}},\"id\":\"1075\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"num_minor_ticks\":10},\"id\":\"1019\",\"type\":\"LogTicker\"},{\"attributes\":{\"click_policy\":\"hide\",\"items\":[{\"id\":\"1046\"},{\"id\":\"1071\"},{\"id\":\"1096\"}],\"location\":\"top_left\"},\"id\":\"1045\",\"type\":\"Legend\"},{\"attributes\":{},\"id\":\"1006\",\"type\":\"DataRange1d\"},{\"attributes\":{\"ticker\":null},\"id\":\"1031\",\"type\":\"LogTickFormatter\"},{\"attributes\":{\"source\":{\"id\":\"1002\"}},\"id\":\"1051\",\"type\":\"CDSView\"},{\"attributes\":{\"axis\":{\"id\":\"1018\"},\"band_fill_alpha\":0.1,\"band_fill_color\":\"olive\",\"dimension\":1,\"grid_line_alpha\":0,\"ticker\":null},\"id\":\"1021\",\"type\":\"Grid\"},{\"attributes\":{\"data_source\":{\"id\":\"1002\"},\"glyph\":{\"id\":\"1048\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1049\"},\"selection_glyph\":null,\"view\":{\"id\":\"1051\"}},\"id\":\"1050\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"callback\":null,\"renderers\":[{\"id\":\"1026\"},{\"id\":\"1050\"},{\"id\":\"1075\"}],\"tooltips\":[[\"Indiv\\u00edduos\",\"$y{0.00 a}\"],[\"Data\",\"@d/@m/@y\"]]},\"id\":\"1097\",\"type\":\"HoverTool\"},{\"attributes\":{},\"id\":\"1070\",\"type\":\"UnionRenderers\"},{\"attributes\":{\"base\":24,\"mantissas\":[1,2,4,6,8,12],\"max_interval\":43200000.0,\"min_interval\":3600000.0,\"num_minor_ticks\":0},\"id\":\"1035\",\"type\":\"AdaptiveTicker\"},{\"attributes\":{\"line_alpha\":0.1,\"line_cap\":\"round\",\"line_color\":\"#de425b\",\"line_width\":3,\"x\":{\"field\":\"Data\"},\"y\":{\"field\":\"Mortes\"}},\"id\":\"1049\",\"type\":\"Line\"},{\"attributes\":{\"line_cap\":\"round\",\"line_color\":\"#ffd885\",\"line_width\":3,\"x\":{\"field\":\"Data\"},\"y\":{\"field\":\"Infectados\"}},\"id\":\"1024\",\"type\":\"Line\"}],\"root_ids\":[\"1003\"]},\"title\":\"Bokeh Application\",\"version\":\"2.0.1\"}};\n",
       "  var render_items = [{\"docid\":\"26288b89-f0d1-475f-9683-af42bf9ddcaa\",\"root_ids\":[\"1003\"],\"roots\":{\"1003\":\"054bcdbc-f0fc-4c63-974b-04e574c25ca1\"}}];\n",
       "  root.Bokeh.embed.embed_items_notebook(docs_json, render_items);\n",
       "\n",
       "  }\n",
       "  if (root.Bokeh !== undefined) {\n",
       "    embed_document(root);\n",
       "  } else {\n",
       "    var attempts = 0;\n",
       "    var timer = setInterval(function(root) {\n",
       "      if (root.Bokeh !== undefined) {\n",
       "        clearInterval(timer);\n",
       "        embed_document(root);\n",
       "      } else {\n",
       "        attempts++;\n",
       "        if (attempts > 100) {\n",
       "          clearInterval(timer);\n",
       "          console.log(\"Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing\");\n",
       "        }\n",
       "      }\n",
       "    }, 10, root)\n",
       "  }\n",
       "})(window);"
      ],
      "application/vnd.bokehjs_exec.v0+json": ""
     },
     "metadata": {
      "application/vnd.bokehjs_exec.v0+json": {
       "id": "1003"
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "from bokeh.models   import Legend, ColumnDataSource, RangeTool, LinearAxis, Range1d, HoverTool\n",
    "from bokeh.palettes import brewer, Inferno256\n",
    "from bokeh.plotting import figure, show\n",
    "from bokeh.layouts  import column\n",
    "from bokeh.io       import output_notebook\n",
    "\n",
    "output_notebook()\n",
    "\n",
    "from datetime import timedelta\n",
    "\n",
    "# Criando o vetor de tempo\n",
    "date_vec = [ first_date + timedelta(days=k) for k in range(len(M))]\n",
    "\n",
    "# Criando os valores para legenda no plot\n",
    "year =  [str(int(d.year)) for d in date_vec ]\n",
    "month = [(\"0\"+str(int(d.month)))[-2:] for d in date_vec ]\n",
    "day =   [(\"0\"+str(int(d.day)))[-2:] for d in date_vec ]\n",
    "\n",
    "# Criando a fonte de dados\n",
    "source = ColumnDataSource(data={\n",
    "    'Data'       : date_vec,\n",
    "    'd': day, 'm': month, 'y': year,\n",
    "    'Infectados' : I,\n",
    "    'Removidos'  : R,\n",
    "    'Mortes'     : M,\n",
    "})\n",
    "\n",
    "\n",
    "# Criando a figura\n",
    "p = figure(plot_height=500,\n",
    "           plot_width=600,\n",
    "           x_axis_type=\"datetime\", \n",
    "           tools=\"\", \n",
    "           toolbar_location=None,\n",
    "           y_axis_type=\"log\",\n",
    "           title=\"Evolu√ß√£o do COVID - Brasil\")\n",
    "\n",
    "# Preparando o estilo\n",
    "p.grid.grid_line_alpha = 0\n",
    "p.ygrid.band_fill_color = \"olive\"\n",
    "p.ygrid.band_fill_alpha = 0.1\n",
    "p.yaxis.axis_label = \"Indiv√≠duos\"\n",
    "p.xaxis.axis_label = \"Dias\"\n",
    "\n",
    "# Incluindo as curvas\n",
    "i_p = p.line(x='Data', y='Infectados', legend_label=\"Infectados\", line_cap=\"round\", line_width=3, color=\"#ffd885\", source=source)\n",
    "m_p = p.line(x='Data', y='Mortes', legend_label=\"Mortes\", line_cap=\"round\", line_width=3, color=\"#de425b\", source=source)\n",
    "r_p = p.line(x='Data', y='Removidos', legend_label=\"Removidos\", line_cap=\"round\", line_width=3, color=\"#99d594\", source=source)\n",
    "\n",
    "# Colocando as legendas\n",
    "p.legend.click_policy=\"hide\"\n",
    "p.legend.location = \"top_left\"\n",
    "\n",
    "# Incluindo a ferramenta de hover\n",
    "p.add_tools(HoverTool(\n",
    "    tooltips=[\n",
    "        ( 'Indiv√≠duos', '$y{0.00 a}'),\n",
    "        ( 'Data',       '@d/@m/@y' ),\n",
    "    ],\n",
    "    renderers=[\n",
    "        i_p, m_p, r_p\n",
    "    ]\n",
    "))\n",
    "\n",
    "show(p)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# O problema\n",
    "\n",
    "O conjunto de equa√ß√µes diferenciais que caracteriza o modelo √© descrito abaixo. No modelo $\\beta - \\text{representa a taxa de transmiss√£o ou taxa efetiva de contato} $  e $r - \\text{a taxa de remo√ß√£o ou recupera√ß√£o.}$ \n",
    "\n",
    "\n",
    "$$ \\begin{split}\n",
    "   \\frac{dS(t)}{dt} & = -\\beta S(t) I(t) \\\\\n",
    "   \\frac{dI(t)}{dt} & = \\beta S(t) I(t) - rI(t)  \\\\\n",
    "   \\frac{dR(t)}{dt} & = r I(t)\n",
    "   \\end{split}$$\n",
    "\n",
    "   Gostar√≠amos de identificar quais par√¢metros $\\beta$ e $r$ resultam num melhor ajuste do modelo para os dados de **S**,**I** e **R**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "    <div class=\"bk-root\">\n",
       "        <a href=\"https://bokeh.org\" target=\"_blank\" class=\"bk-logo bk-logo-small bk-logo-notebook\"></a>\n",
       "        <span id=\"1232\">Loading BokehJS ...</span>\n",
       "    </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "(function(root) {\n",
       "  function now() {\n",
       "    return new Date();\n",
       "  }\n",
       "\n",
       "  var force = true;\n",
       "\n",
       "  if (typeof root._bokeh_onload_callbacks === \"undefined\" || force === true) {\n",
       "    root._bokeh_onload_callbacks = [];\n",
       "    root._bokeh_is_loading = undefined;\n",
       "  }\n",
       "\n",
       "  var JS_MIME_TYPE = 'application/javascript';\n",
       "  var HTML_MIME_TYPE = 'text/html';\n",
       "  var EXEC_MIME_TYPE = 'application/vnd.bokehjs_exec.v0+json';\n",
       "  var CLASS_NAME = 'output_bokeh rendered_html';\n",
       "\n",
       "  /**\n",
       "   * Render data to the DOM node\n",
       "   */\n",
       "  function render(props, node) {\n",
       "    var script = document.createElement(\"script\");\n",
       "    node.appendChild(script);\n",
       "  }\n",
       "\n",
       "  /**\n",
       "   * Handle when an output is cleared or removed\n",
       "   */\n",
       "  function handleClearOutput(event, handle) {\n",
       "    var cell = handle.cell;\n",
       "\n",
       "    var id = cell.output_area._bokeh_element_id;\n",
       "    var server_id = cell.output_area._bokeh_server_id;\n",
       "    // Clean up Bokeh references\n",
       "    if (id != null && id in Bokeh.index) {\n",
       "      Bokeh.index[id].model.document.clear();\n",
       "      delete Bokeh.index[id];\n",
       "    }\n",
       "\n",
       "    if (server_id !== undefined) {\n",
       "      // Clean up Bokeh references\n",
       "      var cmd = \"from bokeh.io.state import curstate; print(curstate().uuid_to_server['\" + server_id + \"'].get_sessions()[0].document.roots[0]._id)\";\n",
       "      cell.notebook.kernel.execute(cmd, {\n",
       "        iopub: {\n",
       "          output: function(msg) {\n",
       "            var id = msg.content.text.trim();\n",
       "            if (id in Bokeh.index) {\n",
       "              Bokeh.index[id].model.document.clear();\n",
       "              delete Bokeh.index[id];\n",
       "            }\n",
       "          }\n",
       "        }\n",
       "      });\n",
       "      // Destroy server and session\n",
       "      var cmd = \"import bokeh.io.notebook as ion; ion.destroy_server('\" + server_id + \"')\";\n",
       "      cell.notebook.kernel.execute(cmd);\n",
       "    }\n",
       "  }\n",
       "\n",
       "  /**\n",
       "   * Handle when a new output is added\n",
       "   */\n",
       "  function handleAddOutput(event, handle) {\n",
       "    var output_area = handle.output_area;\n",
       "    var output = handle.output;\n",
       "\n",
       "    // limit handleAddOutput to display_data with EXEC_MIME_TYPE content only\n",
       "    if ((output.output_type != \"display_data\") || (!output.data.hasOwnProperty(EXEC_MIME_TYPE))) {\n",
       "      return\n",
       "    }\n",
       "\n",
       "    var toinsert = output_area.element.find(\".\" + CLASS_NAME.split(' ')[0]);\n",
       "\n",
       "    if (output.metadata[EXEC_MIME_TYPE][\"id\"] !== undefined) {\n",
       "      toinsert[toinsert.length - 1].firstChild.textContent = output.data[JS_MIME_TYPE];\n",
       "      // store reference to embed id on output_area\n",
       "      output_area._bokeh_element_id = output.metadata[EXEC_MIME_TYPE][\"id\"];\n",
       "    }\n",
       "    if (output.metadata[EXEC_MIME_TYPE][\"server_id\"] !== undefined) {\n",
       "      var bk_div = document.createElement(\"div\");\n",
       "      bk_div.innerHTML = output.data[HTML_MIME_TYPE];\n",
       "      var script_attrs = bk_div.children[0].attributes;\n",
       "      for (var i = 0; i < script_attrs.length; i++) {\n",
       "        toinsert[toinsert.length - 1].firstChild.setAttribute(script_attrs[i].name, script_attrs[i].value);\n",
       "        toinsert[toinsert.length - 1].firstChild.textContent = bk_div.children[0].textContent\n",
       "      }\n",
       "      // store reference to server id on output_area\n",
       "      output_area._bokeh_server_id = output.metadata[EXEC_MIME_TYPE][\"server_id\"];\n",
       "    }\n",
       "  }\n",
       "\n",
       "  function register_renderer(events, OutputArea) {\n",
       "\n",
       "    function append_mime(data, metadata, element) {\n",
       "      // create a DOM node to render to\n",
       "      var toinsert = this.create_output_subarea(\n",
       "        metadata,\n",
       "        CLASS_NAME,\n",
       "        EXEC_MIME_TYPE\n",
       "      );\n",
       "      this.keyboard_manager.register_events(toinsert);\n",
       "      // Render to node\n",
       "      var props = {data: data, metadata: metadata[EXEC_MIME_TYPE]};\n",
       "      render(props, toinsert[toinsert.length - 1]);\n",
       "      element.append(toinsert);\n",
       "      return toinsert\n",
       "    }\n",
       "\n",
       "    /* Handle when an output is cleared or removed */\n",
       "    events.on('clear_output.CodeCell', handleClearOutput);\n",
       "    events.on('delete.Cell', handleClearOutput);\n",
       "\n",
       "    /* Handle when a new output is added */\n",
       "    events.on('output_added.OutputArea', handleAddOutput);\n",
       "\n",
       "    /**\n",
       "     * Register the mime type and append_mime function with output_area\n",
       "     */\n",
       "    OutputArea.prototype.register_mime_type(EXEC_MIME_TYPE, append_mime, {\n",
       "      /* Is output safe? */\n",
       "      safe: true,\n",
       "      /* Index of renderer in `output_area.display_order` */\n",
       "      index: 0\n",
       "    });\n",
       "  }\n",
       "\n",
       "  // register the mime type if in Jupyter Notebook environment and previously unregistered\n",
       "  if (root.Jupyter !== undefined) {\n",
       "    var events = require('base/js/events');\n",
       "    var OutputArea = require('notebook/js/outputarea').OutputArea;\n",
       "\n",
       "    if (OutputArea.prototype.mime_types().indexOf(EXEC_MIME_TYPE) == -1) {\n",
       "      register_renderer(events, OutputArea);\n",
       "    }\n",
       "  }\n",
       "\n",
       "  \n",
       "  if (typeof (root._bokeh_timeout) === \"undefined\" || force === true) {\n",
       "    root._bokeh_timeout = Date.now() + 5000;\n",
       "    root._bokeh_failed_load = false;\n",
       "  }\n",
       "\n",
       "  var NB_LOAD_WARNING = {'data': {'text/html':\n",
       "     \"<div style='background-color: #fdd'>\\n\"+\n",
       "     \"<p>\\n\"+\n",
       "     \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n",
       "     \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n",
       "     \"</p>\\n\"+\n",
       "     \"<ul>\\n\"+\n",
       "     \"<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n\"+\n",
       "     \"<li>use INLINE resources instead, as so:</li>\\n\"+\n",
       "     \"</ul>\\n\"+\n",
       "     \"<code>\\n\"+\n",
       "     \"from bokeh.resources import INLINE\\n\"+\n",
       "     \"output_notebook(resources=INLINE)\\n\"+\n",
       "     \"</code>\\n\"+\n",
       "     \"</div>\"}};\n",
       "\n",
       "  function display_loaded() {\n",
       "    var el = document.getElementById(\"1232\");\n",
       "    if (el != null) {\n",
       "      el.textContent = \"BokehJS is loading...\";\n",
       "    }\n",
       "    if (root.Bokeh !== undefined) {\n",
       "      if (el != null) {\n",
       "        el.textContent = \"BokehJS \" + root.Bokeh.version + \" successfully loaded.\";\n",
       "      }\n",
       "    } else if (Date.now() < root._bokeh_timeout) {\n",
       "      setTimeout(display_loaded, 100)\n",
       "    }\n",
       "  }\n",
       "\n",
       "\n",
       "  function run_callbacks() {\n",
       "    try {\n",
       "      root._bokeh_onload_callbacks.forEach(function(callback) {\n",
       "        if (callback != null)\n",
       "          callback();\n",
       "      });\n",
       "    } finally {\n",
       "      delete root._bokeh_onload_callbacks\n",
       "    }\n",
       "    console.debug(\"Bokeh: all callbacks have finished\");\n",
       "  }\n",
       "\n",
       "  function load_libs(css_urls, js_urls, callback) {\n",
       "    if (css_urls == null) css_urls = [];\n",
       "    if (js_urls == null) js_urls = [];\n",
       "\n",
       "    root._bokeh_onload_callbacks.push(callback);\n",
       "    if (root._bokeh_is_loading > 0) {\n",
       "      console.debug(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n",
       "      return null;\n",
       "    }\n",
       "    if (js_urls == null || js_urls.length === 0) {\n",
       "      run_callbacks();\n",
       "      return null;\n",
       "    }\n",
       "    console.debug(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n",
       "    root._bokeh_is_loading = css_urls.length + js_urls.length;\n",
       "\n",
       "    function on_load() {\n",
       "      root._bokeh_is_loading--;\n",
       "      if (root._bokeh_is_loading === 0) {\n",
       "        console.debug(\"Bokeh: all BokehJS libraries/stylesheets loaded\");\n",
       "        run_callbacks()\n",
       "      }\n",
       "    }\n",
       "\n",
       "    function on_error() {\n",
       "      console.error(\"failed to load \" + url);\n",
       "    }\n",
       "\n",
       "    for (var i = 0; i < css_urls.length; i++) {\n",
       "      var url = css_urls[i];\n",
       "      const element = document.createElement(\"link\");\n",
       "      element.onload = on_load;\n",
       "      element.onerror = on_error;\n",
       "      element.rel = \"stylesheet\";\n",
       "      element.type = \"text/css\";\n",
       "      element.href = url;\n",
       "      console.debug(\"Bokeh: injecting link tag for BokehJS stylesheet: \", url);\n",
       "      document.body.appendChild(element);\n",
       "    }\n",
       "\n",
       "    const hashes = {\"https://cdn.bokeh.org/bokeh/release/bokeh-2.0.1.min.js\": \"JpP8FXbgAZLkfur7LiK3j9AGBhHNIvF742meBJrjO2ShJDhCG2I1uVvW+0DUtrmc\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.0.1.min.js\": \"xZlADit0Q04ISQEdKg2k3L4W9AwQBAuDs9nJL9fM/WwzL1tEU9VPNezOFX0nLEAz\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.0.1.min.js\": \"4BuPRZkdMKSnj3zoxiNrQ86XgNw0rYmBOxe7nshquXwwcauupgBF2DHLVG1WuZlV\", \"https://cdn.bokeh.org/bokeh/release/bokeh-gl-2.0.1.min.js\": \"Dv1SQ87hmDqK6S5OhBf0bCuwAEvL5QYL0PuR/F1SPVhCS/r/abjkbpKDYL2zeM19\"};\n",
       "\n",
       "    for (var i = 0; i < js_urls.length; i++) {\n",
       "      var url = js_urls[i];\n",
       "      var element = document.createElement('script');\n",
       "      element.onload = on_load;\n",
       "      element.onerror = on_error;\n",
       "      element.async = false;\n",
       "      element.src = url;\n",
       "      if (url in hashes) {\n",
       "        element.crossOrigin = \"anonymous\";\n",
       "        element.integrity = \"sha384-\" + hashes[url];\n",
       "      }\n",
       "      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n",
       "      document.head.appendChild(element);\n",
       "    }\n",
       "  };var element = document.getElementById(\"1232\");\n",
       "  if (element == null) {\n",
       "    console.error(\"Bokeh: ERROR: autoload.js configured with elementid '1232' but no matching script tag was found. \")\n",
       "    return false;\n",
       "  }\n",
       "\n",
       "  function inject_raw_css(css) {\n",
       "    const element = document.createElement(\"style\");\n",
       "    element.appendChild(document.createTextNode(css));\n",
       "    document.body.appendChild(element);\n",
       "  }\n",
       "\n",
       "  \n",
       "  var js_urls = [\"https://cdn.bokeh.org/bokeh/release/bokeh-2.0.1.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.0.1.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.0.1.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-gl-2.0.1.min.js\"];\n",
       "  var css_urls = [];\n",
       "  \n",
       "\n",
       "  var inline_js = [\n",
       "    function(Bokeh) {\n",
       "      Bokeh.set_log_level(\"info\");\n",
       "    },\n",
       "    function(Bokeh) {\n",
       "    \n",
       "    \n",
       "    }\n",
       "  ];\n",
       "\n",
       "  function run_inline_js() {\n",
       "    \n",
       "    if (root.Bokeh !== undefined || force === true) {\n",
       "      \n",
       "    for (var i = 0; i < inline_js.length; i++) {\n",
       "      inline_js[i].call(root, root.Bokeh);\n",
       "    }\n",
       "    if (force === true) {\n",
       "        display_loaded();\n",
       "      }} else if (Date.now() < root._bokeh_timeout) {\n",
       "      setTimeout(run_inline_js, 100);\n",
       "    } else if (!root._bokeh_failed_load) {\n",
       "      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n",
       "      root._bokeh_failed_load = true;\n",
       "    } else if (force !== true) {\n",
       "      var cell = $(document.getElementById(\"1232\")).parents('.cell').data().cell;\n",
       "      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n",
       "    }\n",
       "\n",
       "  }\n",
       "\n",
       "  if (root._bokeh_is_loading === 0) {\n",
       "    console.debug(\"Bokeh: BokehJS loaded, going straight to plotting\");\n",
       "    run_inline_js();\n",
       "  } else {\n",
       "    load_libs(css_urls, js_urls, function() {\n",
       "      console.debug(\"Bokeh: BokehJS plotting callback run at\", now());\n",
       "      run_inline_js();\n",
       "    });\n",
       "  }\n",
       "}(window));"
      ],
      "application/vnd.bokehjs_load.v0+json": "\n(function(root) {\n  function now() {\n    return new Date();\n  }\n\n  var force = true;\n\n  if (typeof root._bokeh_onload_callbacks === \"undefined\" || force === true) {\n    root._bokeh_onload_callbacks = [];\n    root._bokeh_is_loading = undefined;\n  }\n\n  \n\n  \n  if (typeof (root._bokeh_timeout) === \"undefined\" || force === true) {\n    root._bokeh_timeout = Date.now() + 5000;\n    root._bokeh_failed_load = false;\n  }\n\n  var NB_LOAD_WARNING = {'data': {'text/html':\n     \"<div style='background-color: #fdd'>\\n\"+\n     \"<p>\\n\"+\n     \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n     \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n     \"</p>\\n\"+\n     \"<ul>\\n\"+\n     \"<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n\"+\n     \"<li>use INLINE resources instead, as so:</li>\\n\"+\n     \"</ul>\\n\"+\n     \"<code>\\n\"+\n     \"from bokeh.resources import INLINE\\n\"+\n     \"output_notebook(resources=INLINE)\\n\"+\n     \"</code>\\n\"+\n     \"</div>\"}};\n\n  function display_loaded() {\n    var el = document.getElementById(\"1232\");\n    if (el != null) {\n      el.textContent = \"BokehJS is loading...\";\n    }\n    if (root.Bokeh !== undefined) {\n      if (el != null) {\n        el.textContent = \"BokehJS \" + root.Bokeh.version + \" successfully loaded.\";\n      }\n    } else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(display_loaded, 100)\n    }\n  }\n\n\n  function run_callbacks() {\n    try {\n      root._bokeh_onload_callbacks.forEach(function(callback) {\n        if (callback != null)\n          callback();\n      });\n    } finally {\n      delete root._bokeh_onload_callbacks\n    }\n    console.debug(\"Bokeh: all callbacks have finished\");\n  }\n\n  function load_libs(css_urls, js_urls, callback) {\n    if (css_urls == null) css_urls = [];\n    if (js_urls == null) js_urls = [];\n\n    root._bokeh_onload_callbacks.push(callback);\n    if (root._bokeh_is_loading > 0) {\n      console.debug(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n      return null;\n    }\n    if (js_urls == null || js_urls.length === 0) {\n      run_callbacks();\n      return null;\n    }\n    console.debug(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n    root._bokeh_is_loading = css_urls.length + js_urls.length;\n\n    function on_load() {\n      root._bokeh_is_loading--;\n      if (root._bokeh_is_loading === 0) {\n        console.debug(\"Bokeh: all BokehJS libraries/stylesheets loaded\");\n        run_callbacks()\n      }\n    }\n\n    function on_error() {\n      console.error(\"failed to load \" + url);\n    }\n\n    for (var i = 0; i < css_urls.length; i++) {\n      var url = css_urls[i];\n      const element = document.createElement(\"link\");\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.rel = \"stylesheet\";\n      element.type = \"text/css\";\n      element.href = url;\n      console.debug(\"Bokeh: injecting link tag for BokehJS stylesheet: \", url);\n      document.body.appendChild(element);\n    }\n\n    const hashes = {\"https://cdn.bokeh.org/bokeh/release/bokeh-2.0.1.min.js\": \"JpP8FXbgAZLkfur7LiK3j9AGBhHNIvF742meBJrjO2ShJDhCG2I1uVvW+0DUtrmc\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.0.1.min.js\": \"xZlADit0Q04ISQEdKg2k3L4W9AwQBAuDs9nJL9fM/WwzL1tEU9VPNezOFX0nLEAz\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.0.1.min.js\": \"4BuPRZkdMKSnj3zoxiNrQ86XgNw0rYmBOxe7nshquXwwcauupgBF2DHLVG1WuZlV\", \"https://cdn.bokeh.org/bokeh/release/bokeh-gl-2.0.1.min.js\": \"Dv1SQ87hmDqK6S5OhBf0bCuwAEvL5QYL0PuR/F1SPVhCS/r/abjkbpKDYL2zeM19\"};\n\n    for (var i = 0; i < js_urls.length; i++) {\n      var url = js_urls[i];\n      var element = document.createElement('script');\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.async = false;\n      element.src = url;\n      if (url in hashes) {\n        element.crossOrigin = \"anonymous\";\n        element.integrity = \"sha384-\" + hashes[url];\n      }\n      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      document.head.appendChild(element);\n    }\n  };var element = document.getElementById(\"1232\");\n  if (element == null) {\n    console.error(\"Bokeh: ERROR: autoload.js configured with elementid '1232' but no matching script tag was found. \")\n    return false;\n  }\n\n  function inject_raw_css(css) {\n    const element = document.createElement(\"style\");\n    element.appendChild(document.createTextNode(css));\n    document.body.appendChild(element);\n  }\n\n  \n  var js_urls = [\"https://cdn.bokeh.org/bokeh/release/bokeh-2.0.1.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.0.1.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.0.1.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-gl-2.0.1.min.js\"];\n  var css_urls = [];\n  \n\n  var inline_js = [\n    function(Bokeh) {\n      Bokeh.set_log_level(\"info\");\n    },\n    function(Bokeh) {\n    \n    \n    }\n  ];\n\n  function run_inline_js() {\n    \n    if (root.Bokeh !== undefined || force === true) {\n      \n    for (var i = 0; i < inline_js.length; i++) {\n      inline_js[i].call(root, root.Bokeh);\n    }\n    if (force === true) {\n        display_loaded();\n      }} else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(run_inline_js, 100);\n    } else if (!root._bokeh_failed_load) {\n      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n      root._bokeh_failed_load = true;\n    } else if (force !== true) {\n      var cell = $(document.getElementById(\"1232\")).parents('.cell').data().cell;\n      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n    }\n\n  }\n\n  if (root._bokeh_is_loading === 0) {\n    console.debug(\"Bokeh: BokehJS loaded, going straight to plotting\");\n    run_inline_js();\n  } else {\n    load_libs(css_urls, js_urls, function() {\n      console.debug(\"Bokeh: BokehJS plotting callback run at\", now());\n      run_inline_js();\n    });\n  }\n}(window));"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# Importando o modelo SIR\n",
    "from models import *\n",
    "\n",
    "sir_model = ss.SIR()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Estimando os par√¢metros\n",
    "\n",
    "Para estimarmos os par√¢metros do modelo $\\mathbf{\\beta}$ e $\\mathbf{r}$, vamos utilizar  inicialmente o m√©todo de m√≠nimos quadrados. Podemos ent√£o formular o problema a partir da Equa√ß√£o abaixo. Na Equa√ß√£o $y_m(k)$ representa o dado real em cada amostra $k$; $y_s(\\theta,k)$ representa o **valor estimado** a partir da simula√ß√£o do modelo para uma determinada amostra $k$ e $\\theta$ representa o vetor ed par√¢metros $\\theta = [ \\beta \\; \\; r]^T$. \n",
    "\n",
    "$$ min_{\\theta}= \\sum_{k=1}^{K}(y_m(k) - y_s(\\theta,k))^2 $$\n",
    "\n",
    "A equa√ß√£o formula a pergunta: quais os valores de $beta$ e $r$ que minizam o erro quadr√°tico quando comparados com os dados reais."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\t ‚îú‚îÄ S(0) ‚îÄ I(0) ‚îÄ R(0) ‚îÄ  [11868849.0, 810]\n",
      "\t ‚îú‚îÄ beta ‚îÄ   8.42541682011457e-08   r ‚îÄ   0.015384615384615385\n",
      "\t ‚îú‚îÄ beta bound ‚îÄ   8.42541682011457e-11  ‚îÄ  8.42541682011457e-08\n",
      "\t ‚îú‚îÄ r bound ‚îÄ   0.00015384615384615385  ‚îÄ  0.15384615384615385\n",
      "\t ‚îú‚îÄ equation weights ‚îÄ   [0.00724729078615795, 1, 1]\n",
      "\t ‚îî‚îÄ Defined at:  1.7959279357833352e-08  ‚îÄ  0.13628588022674576 \n",
      "\n"
     ]
    }
   ],
   "source": [
    "\n",
    "import numpy as np\n",
    "\n",
    "S = N - I - R\n",
    "\n",
    "time = np.linspace(0, len(I), len(I))\n",
    "\n",
    "# Estimando os par√¢metros\n",
    "sir_model.fit(S, I, None, time, beta_sens=[1000,1], r_sens=[100,10])\n",
    "\n",
    "r_included = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "if r_included:\n",
    "    initial = [S[0], I[0], R[0]]\n",
    "else:\n",
    "    initial = [S[0], I[0]]\n",
    "    \n",
    "results = sir_model.predict(initial, time)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "  <div class=\"bk-root\" id=\"e5abd7cb-bc0d-4833-aad6-2beef2dc3309\" data-root-id=\"1003\"></div>\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "(function(root) {\n",
       "  function embed_document(root) {\n",
       "    \n",
       "  var docs_json = {\"e7a9536d-6dbf-4fe3-a537-bb01ecfc06e7\":{\"roots\":{\"references\":[{\"attributes\":{\"below\":[{\"id\":\"1014\"}],\"center\":[{\"id\":\"1017\"},{\"id\":\"1021\"},{\"id\":\"1045\"}],\"left\":[{\"id\":\"1018\"}],\"plot_height\":500,\"renderers\":[{\"id\":\"1026\"},{\"id\":\"1050\"},{\"id\":\"1075\"},{\"id\":\"1236\"}],\"title\":{\"id\":\"1004\"},\"toolbar\":{\"id\":\"1022\"},\"toolbar_location\":null,\"x_range\":{\"id\":\"1006\"},\"x_scale\":{\"id\":\"1010\"},\"y_range\":{\"id\":\"1008\"},\"y_scale\":{\"id\":\"1012\"}},\"id\":\"1003\",\"subtype\":\"Figure\",\"type\":\"Plot\"},{\"attributes\":{\"base\":60,\"mantissas\":[1,2,5,10,15,20,30],\"max_interval\":1800000.0,\"min_interval\":1000.0,\"num_minor_ticks\":0},\"id\":\"1034\",\"type\":\"AdaptiveTicker\"},{\"attributes\":{\"label\":{\"value\":\"Removidos\"},\"renderers\":[{\"id\":\"1075\"}]},\"id\":\"1096\",\"type\":\"LegendItem\"},{\"attributes\":{\"line_cap\":\"round\",\"line_color\":\"#f57f17\",\"line_dash\":[6],\"line_width\":4,\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1234\",\"type\":\"Line\"},{\"attributes\":{\"line_alpha\":0.1,\"line_cap\":\"round\",\"line_color\":\"#f57f17\",\"line_dash\":[6],\"line_width\":4,\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1235\",\"type\":\"Line\"},{\"attributes\":{\"days\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]},\"id\":\"1036\",\"type\":\"DaysTicker\"},{\"attributes\":{\"line_cap\":\"round\",\"line_color\":\"#99d594\",\"line_width\":3,\"x\":{\"field\":\"Data\"},\"y\":{\"field\":\"Removidos\"}},\"id\":\"1073\",\"type\":\"Line\"},{\"attributes\":{\"line_alpha\":0.1,\"line_cap\":\"round\",\"line_color\":\"#99d594\",\"line_width\":3,\"x\":{\"field\":\"Data\"},\"y\":{\"field\":\"Removidos\"}},\"id\":\"1074\",\"type\":\"Line\"},{\"attributes\":{},\"id\":\"1278\",\"type\":\"UnionRenderers\"},{\"attributes\":{\"label\":{\"value\":\"Infectados - Modelo\"},\"renderers\":[{\"id\":\"1236\"}]},\"id\":\"1257\",\"type\":\"LegendItem\"},{\"attributes\":{\"days\":[1,4,7,10,13,16,19,22,25,28]},\"id\":\"1037\",\"type\":\"DaysTicker\"},{\"attributes\":{\"text\":\"Evolu\\u00e7\\u00e3o do COVID - Brasil\"},\"id\":\"1004\",\"type\":\"Title\"},{\"attributes\":{\"label\":{\"value\":\"Mortes\"},\"renderers\":[{\"id\":\"1050\"}]},\"id\":\"1071\",\"type\":\"LegendItem\"},{\"attributes\":{\"days\":[1,8,15,22]},\"id\":\"1038\",\"type\":\"DaysTicker\"},{\"attributes\":{},\"id\":\"1029\",\"type\":\"DatetimeTickFormatter\"},{\"attributes\":{\"line_cap\":\"round\",\"line_color\":\"#de425b\",\"line_width\":3,\"x\":{\"field\":\"Data\"},\"y\":{\"field\":\"Mortes\"}},\"id\":\"1048\",\"type\":\"Line\"},{\"attributes\":{\"days\":[1,15]},\"id\":\"1039\",\"type\":\"DaysTicker\"},{\"attributes\":{},\"id\":\"1069\",\"type\":\"Selection\"},{\"attributes\":{\"source\":{\"id\":\"1002\"}},\"id\":\"1076\",\"type\":\"CDSView\"},{\"attributes\":{},\"id\":\"1010\",\"type\":\"LinearScale\"},{\"attributes\":{\"months\":[0,1,2,3,4,5,6,7,8,9,10,11]},\"id\":\"1040\",\"type\":\"MonthsTicker\"},{\"attributes\":{},\"id\":\"1008\",\"type\":\"DataRange1d\"},{\"attributes\":{\"data\":{\"Data\":[1585008000000.0,1585094400000.0,1585180800000.0,1585267200000.0,1585353600000.0,1585440000000.0,1585526400000.0,1585612800000.0,1585699200000.0,1585785600000.0,1585872000000.0,1585958400000.0,1586044800000.0,1586131200000.0,1586217600000.0,1586304000000.0,1586390400000.0,1586476800000.0,1586563200000.0,1586649600000.0,1586736000000.0,1586822400000.0,1586908800000.0,1586995200000.0,1587081600000.0,1587168000000.0,1587254400000.0,1587340800000.0,1587427200000.0,1587513600000.0,1587600000000.0,1587686400000.0,1587772800000.0,1587859200000.0,1587945600000.0,1588032000000.0,1588118400000.0,1588204800000.0,1588291200000.0,1588377600000.0,1588464000000.0,1588550400000.0,1588636800000.0,1588723200000.0,1588809600000.0,1588896000000.0,1588982400000.0,1589068800000.0,1589155200000.0,1589241600000.0,1589328000000.0,1589414400000.0,1589500800000.0,1589587200000.0,1589673600000.0,1589760000000.0,1589846400000.0,1589932800000.0,1590019200000.0,1590105600000.0,1590192000000.0,1590278400000.0,1590364800000.0,1590451200000.0,1590537600000.0],\"Infectados\":[810,862,1053,1223,1406,1451,1517,2339,2981,3506,4048,4466,4620,4866,5682,6708,7480,8216,8419,8755,8895,9371,11043,11568,12841,13894,14267,14580,15385,15914,16740,17826,20004,20715,21696,24041,26158,28698,30374,31174,31772,32187,34053,37853,39928,41830,44411,45444,46131,47719,51097,54286,58378,61183,62345,63066,65995,69859,73739,76871,80558,82161,83625,86017,86017],\"Mortes\":[40,48,58,68,84,98,113,136,164,188,219,260,275,304,371,428,496,540,560,588,608,695,778,853,928,991,1015,1037,1093,1134,1345,1512,1667,1700,1825,2049,2247,2375,2511,2586,2627,2654,2851,3045,3206,3416,3608,3709,3743,3949,4118,4315,4501,4688,4782,4823,5147,5363,5558,5773,6045,6163,6220,6423,6423],\"Removidos\":{\"__ndarray__\":\"AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADgzUAAAAAAgBvQQAAAAACAa9BAAAAAAEAt0UAAAAAAQC3RQA==\",\"dtype\":\"float64\",\"shape\":[65]},\"d\":[\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\"],\"m\":[\"03\",\"03\",\"03\",\"03\",\"03\",\"03\",\"03\",\"03\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\"],\"y},\"selected\":{\"id\":\"1069\"},\"selection_policy\":{\"id\":\"1070\"}},\"id\":\"1002\",\"type\":\"ColumnDataSource\"},{\"attributes\":{\"mantissas\":[1,2,5],\"max_interval\":500.0,\"num_minor_ticks\":0},\"id\":\"1033\",\"type\":\"AdaptiveTicker\"},{\"attributes\":{\"months\":[0,2,4,6,8,10]},\"id\":\"1041\",\"type\":\"MonthsTicker\"},{\"attributes\":{\"source\":{\"id\":\"1233\"}},\"id\":\"1237\",\"type\":\"CDSView\"},{\"attributes\":{\"data_source\":{\"id\":\"1233\"},\"glyph\":{\"id\":\"1234\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1235\"},\"selection_glyph\":null,\"view\":{\"id\":\"1237\"}},\"id\":\"1236\",\"type\":\"GlyphRenderer\"},{\"attributes\":{},\"id\":\"1012\",\"type\":\"LogScale\"},{\"attributes\":{\"months\":[0,4,8]},\"id\":\"1042\",\"type\":\"MonthsTicker\"},{\"attributes\":{\"axis_label\":\"Indiv\\u00edduos\",\"formatter\":{\"id\":\"1031\"},\"ticker\":{\"id\":\"1019\"}},\"id\":\"1018\",\"type\":\"LogAxis\"},{\"attributes\":{\"axis_label\":\"Dias\",\"formatter\":{\"id\":\"1029\"},\"ticker\":{\"id\":\"1015\"}},\"id\":\"1014\",\"type\":\"DatetimeAxis\"},{\"attributes\":{\"months\":[0,6]},\"id\":\"1043\",\"type\":\"MonthsTicker\"},{\"attributes\":{\"active_drag\":\"auto\",\"active_inspect\":\"auto\",\"active_multi\":null,\"active_scroll\":\"auto\",\"active_tap\":\"auto\",\"tools\":[{\"id\":\"1097\"}]},\"id\":\"1022\",\"type\":\"Toolbar\"},{\"attributes\":{\"line_alpha\":0.1,\"line_cap\":\"round\",\"line_color\":\"#ffd885\",\"line_width\":3,\"x\":{\"field\":\"Data\"},\"y\":{\"field\":\"Infectados\"}},\"id\":\"1025\",\"type\":\"Line\"},{\"attributes\":{\"num_minor_ticks\":5,\"tickers\":[{\"id\":\"1033\"},{\"id\":\"1034\"},{\"id\":\"1035\"},{\"id\":\"1036\"},{\"id\":\"1037\"},{\"id\":\"1038\"},{\"id\":\"1039\"},{\"id\":\"1040\"},{\"id\":\"1041\"},{\"id\":\"1042\"},{\"id\":\"1043\"},{\"id\":\"1044\"}]},\"id\":\"1015\",\"type\":\"DatetimeTicker\"},{\"attributes\":{},\"id\":\"1044\",\"type\":\"YearsTicker\"},{\"attributes\":{\"label\":{\"value\":\"Infectados\"},\"renderers\":[{\"id\":\"1026\"}]},\"id\":\"1046\",\"type\":\"LegendItem\"},{\"attributes\":{\"axis\":{\"id\":\"1014\"},\"grid_line_alpha\":0,\"ticker\":null},\"id\":\"1017\",\"type\":\"Grid\"},{\"attributes\":{\"source\":{\"id\":\"1002\"}},\"id\":\"1027\",\"type\":\"CDSView\"},{\"attributes\":{\"data_source\":{\"id\":\"1002\"},\"glyph\":{\"id\":\"1024\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1025\"},\"selection_glyph\":null,\"view\":{\"id\":\"1027\"}},\"id\":\"1026\",\"type\":\"GlyphRenderer\"},{\"attributes\":{},\"id\":\"1277\",\"type\":\"Selection\"},{\"attributes\":{\"data_source\":{\"id\":\"1002\"},\"glyph\":{\"id\":\"1073\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1074\"},\"selection_glyph\":null,\"view\":{\"id\":\"1076\"}},\"id\":\"1075\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"click_policy\":\"hide\",\"items\":[{\"id\":\"1046\"},{\"id\":\"1071\"},{\"id\":\"1096\"},{\"id\":\"1257\"}],\"location\":\"top_left\"},\"id\":\"1045\",\"type\":\"Legend\"},{\"attributes\":{\"num_minor_ticks\":10},\"id\":\"1019\",\"type\":\"LogTicker\"},{\"attributes\":{},\"id\":\"1006\",\"type\":\"DataRange1d\"},{\"attributes\":{\"ticker\":null},\"id\":\"1031\",\"type\":\"LogTickFormatter\"},{\"attributes\":{\"source\":{\"id\":\"1002\"}},\"id\":\"1051\",\"type\":\"CDSView\"},{\"attributes\":{\"data\":{\"x\":[1585008000000.0,1585094400000.0,1585180800000.0,1585267200000.0,1585353600000.0,1585440000000.0,1585526400000.0,1585612800000.0,1585699200000.0,1585785600000.0,1585872000000.0,1585958400000.0,1586044800000.0,1586131200000.0,1586217600000.0,1586304000000.0,1586390400000.0,1586476800000.0,1586563200000.0,1586649600000.0,1586736000000.0,1586822400000.0,1586908800000.0,1586995200000.0,1587081600000.0,1587168000000.0,1587254400000.0,1587340800000.0,1587427200000.0,1587513600000.0,1587600000000.0,1587686400000.0,1587772800000.0,1587859200000.0,1587945600000.0,1588032000000.0,1588118400000.0,1588204800000.0,1588291200000.0,1588377600000.0,1588464000000.0,1588550400000.0,1588636800000.0,1588723200000.0,1588809600000.0,1588896000000.0,1588982400000.0,1589068800000.0,1589155200000.0,1589241600000.0,1589328000000.0,1589414400000.0,1589500800000.0,1589587200000.0,1589673600000.0,1589760000000.0,1589846400000.0,1589932800000.0,1590019200000.0,1590105600000.0,1590192000000.0,1590278400000.0,1590364800000.0,1590451200000.0,1590537600000.0],\"y\":{\"__ndarray__\":\"AAAAAABQiUADs2F7KV6LQOgFBGgFl41ALXu1ogn+j0DKpXjKeUuRQF0vewrnspJAwZ/zwHs3lEC6x5VAlNuVQJsa3qG9oZdAxV/OpLmMmUDpUJPHgp+bQMkbPShR3Z1Apzmlic8koEDlqE41F3ShQDmDMi6H3qJA4S17vlBmpEBa//Ew0g2mQDBv1V+a16dAyp/ZiGzGqUCRkcVrRN2rQBtA+bdaH65A5DEr6BRIsED6+7l0uZmxQNpeTsahBrNA4G78vP2QtEBZcQSBKTu2QJm55uewB7hA5+CPFVP5uUAKHotkBhO8QGL6eI38V75AAHSMjdNlwEDX6s4W3rjBQK7uFL8dJ8NAp+Al6bmyxEA/LxdbBF7GQEfeA0R8K8hAxDhuetEdykAgYEHi5zfMQPznJQbbfM5AZiSE8QB40ECE4f5wecrRQNnEugHEN9NAXDo3mvHB1ECrwpRrOWvWQAAhqTP7NdhAHCFLqcEk2kBLq7XqRDrcQNEdWgVted5ALQxbN6py4ECjRhxJpcDhQAuwcR1rKONAFcbhAtyr5EAQGWlL9kzmQN0Mnl/XDehAjfDKpLzw6UBDqZVHBPjrQB3bjcotJu5A2f/uLO0+8EDIeMBp5oDxQL07rbN02vJAfk8UbhpN9EDF4zmYadr1QCihjeYChPdAx3+RZ5RL+UD2rZbh1zL7QA==\",\"dtype\":\"float64\",\"shape\":[65]}},\"selected\":{\"id\":\"1277\"},\"selection_policy\":{\"id\":\"1278\"}},\"id\":\"1233\",\"type\":\"ColumnDataSource\"},{\"attributes\":{\"axis\":{\"id\":\"1018\"},\"band_fill_alpha\":0.1,\"band_fill_color\":\"olive\",\"dimension\":1,\"grid_line_alpha\":0,\"ticker\":null},\"id\":\"1021\",\"type\":\"Grid\"},{\"attributes\":{\"data_source\":{\"id\":\"1002\"},\"glyph\":{\"id\":\"1048\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1049\"},\"selection_glyph\":null,\"view\":{\"id\":\"1051\"}},\"id\":\"1050\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"callback\":null,\"renderers\":[{\"id\":\"1026\"},{\"id\":\"1050\"},{\"id\":\"1075\"}],\"tooltips\":[[\"Indiv\\u00edduos\",\"$y{0.00 a}\"],[\"Data\",\"@d/@m/@y\"]]},\"id\":\"1097\",\"type\":\"HoverTool\"},{\"attributes\":{},\"id\":\"1070\",\"type\":\"UnionRenderers\"},{\"attributes\":{\"base\":24,\"mantissas\":[1,2,4,6,8,12],\"max_interval\":43200000.0,\"min_interval\":3600000.0,\"num_minor_ticks\":0},\"id\":\"1035\",\"type\":\"AdaptiveTicker\"},{\"attributes\":{\"line_alpha\":0.1,\"line_cap\":\"round\",\"line_color\":\"#de425b\",\"line_width\":3,\"x\":{\"field\":\"Data\"},\"y\":{\"field\":\"Mortes\"}},\"id\":\"1049\",\"type\":\"Line\"},{\"attributes\":{\"line_cap\":\"round\",\"line_color\":\"#ffd885\",\"line_width\":3,\"x\":{\"field\":\"Data\"},\"y\":{\"field\":\"Infectados\"}},\"id\":\"1024\",\"type\":\"Line\"}],\"root_ids\":[\"1003\"]},\"title\":\"Bokeh Application\",\"version\":\"2.0.1\"}};\n",
       "  var render_items = [{\"docid\":\"e7a9536d-6dbf-4fe3-a537-bb01ecfc06e7\",\"root_ids\":[\"1003\"],\"roots\":{\"1003\":\"e5abd7cb-bc0d-4833-aad6-2beef2dc3309\"}}];\n",
       "  root.Bokeh.embed.embed_items_notebook(docs_json, render_items);\n",
       "\n",
       "  }\n",
       "  if (root.Bokeh !== undefined) {\n",
       "    embed_document(root);\n",
       "  } else {\n",
       "    var attempts = 0;\n",
       "    var timer = setInterval(function(root) {\n",
       "      if (root.Bokeh !== undefined) {\n",
       "        clearInterval(timer);\n",
       "        embed_document(root);\n",
       "      } else {\n",
       "        attempts++;\n",
       "        if (attempts > 100) {\n",
       "          clearInterval(timer);\n",
       "          console.log(\"Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing\");\n",
       "        }\n",
       "      }\n",
       "    }, 10, root)\n",
       "  }\n",
       "})(window);"
      ],
      "application/vnd.bokehjs_exec.v0+json": ""
     },
     "metadata": {
      "application/vnd.bokehjs_exec.v0+json": {
       "id": "1003"
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# Incluindo os dados de infectados\n",
    "im_p = p.line(\n",
    "    date_vec, results[1],\n",
    "    legend_label=\"Infectados - Modelo\",\n",
    "    line_width=4,\n",
    "    line_dash=\"dashed\",\n",
    "    line_cap=\"round\",\n",
    "    color=\"#f57f17\"\n",
    ")\n",
    "\n",
    "# Incluindo os dados de recuperados\n",
    "if r_included:\n",
    "    rm_p = p.line(\n",
    "        date_vec, results[2],\n",
    "        legend_label=\"Removidos - Modelo\",\n",
    "        line_dash=\"dashed\",\n",
    "        line_width=4,\n",
    "        line_cap=\"round\",\n",
    "        color=\"#1b5e20\"\n",
    "    )\n",
    "\n",
    "show(p)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Predi√ß√µes utilizando o modelo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "BokehUserWarning: ColumnDataSource's columns must be of the same length. Current lengths: ('Data', 65), ('DataModelo', 135), ('InfecModelo', 135), ('Infectados', 65), ('Mortes', 65), ('Removidos', 65), ('d', 65), ('ds', 135), ('m', 65), ('ms', 135), ('y', 65), ('ys', 135)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "  <div class=\"bk-root\" id=\"195f9fba-c016-4397-b0d8-06ad26ac25fa\" data-root-id=\"1427\"></div>\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "(function(root) {\n",
       "  function embed_document(root) {\n",
       "    \n",
       "  var docs_json = {\"977c95e1-39da-423b-b7b3-c8e424f26bca\":{\"roots\":{\"references\":[{\"attributes\":{\"below\":[{\"id\":\"1438\"}],\"center\":[{\"id\":\"1441\"},{\"id\":\"1445\"},{\"id\":\"1469\"}],\"left\":[{\"id\":\"1442\"}],\"plot_height\":500,\"renderers\":[{\"id\":\"1450\"},{\"id\":\"1474\"},{\"id\":\"1499\"},{\"id\":\"1524\"}],\"title\":{\"id\":\"1428\"},\"toolbar\":{\"id\":\"1446\"},\"toolbar_location\":null,\"x_range\":{\"id\":\"1430\"},\"x_scale\":{\"id\":\"1434\"},\"y_range\":{\"id\":\"1432\"},\"y_scale\":{\"id\":\"1436\"}},\"id\":\"1427\",\"subtype\":\"Figure\",\"type\":\"Plot\"},{\"attributes\":{\"text\":\"Previs\\u00e3o do COVID - Brasil\"},\"id\":\"1428\",\"type\":\"Title\"},{\"attributes\":{},\"id\":\"1434\",\"type\":\"LinearScale\"},{\"attributes\":{},\"id\":\"1493\",\"type\":\"Selection\"},{\"attributes\":{\"callback\":null,\"renderers\":[{\"id\":\"1450\"},{\"id\":\"1474\"},{\"id\":\"1499\"},{\"id\":\"1524\"}],\"tooltips\":[[\"Indiv\\u00edduos\",\"$y{0.00 a}\"],[\"Data\",\"@ds/@ms/@ys\"]]},\"id\":\"1546\",\"type\":\"HoverTool\"},{\"attributes\":{\"data\":{\"Data\":[1585008000000.0,1585094400000.0,1585180800000.0,1585267200000.0,1585353600000.0,1585440000000.0,1585526400000.0,1585612800000.0,1585699200000.0,1585785600000.0,1585872000000.0,1585958400000.0,1586044800000.0,1586131200000.0,1586217600000.0,1586304000000.0,1586390400000.0,1586476800000.0,1586563200000.0,1586649600000.0,1586736000000.0,1586822400000.0,1586908800000.0,1586995200000.0,1587081600000.0,1587168000000.0,1587254400000.0,1587340800000.0,1587427200000.0,1587513600000.0,1587600000000.0,1587686400000.0,1587772800000.0,1587859200000.0,1587945600000.0,1588032000000.0,1588118400000.0,1588204800000.0,1588291200000.0,1588377600000.0,1588464000000.0,1588550400000.0,1588636800000.0,1588723200000.0,1588809600000.0,1588896000000.0,1588982400000.0,1589068800000.0,1589155200000.0,1589241600000.0,1589328000000.0,1589414400000.0,1589500800000.0,1589587200000.0,1589673600000.0,1589760000000.0,1589846400000.0,1589932800000.0,1590019200000.0,1590105600000.0,1590192000000.0,1590278400000.0,1590364800000.0,1590451200000.0,1590537600000.0],\"DataModelo\":[1585008000000.0,1585095044776.119,1585182089552.239,1585269134328.358,1585356179104.4778,1585443223880.5972,1585530268656.716,1585617313432.836,1585704358208.955,1585791402985.075,1585878447761.194,1585965492537.313,1586052537313.4329,1586139582089.552,1586226626865.672,1586313671641.791,1586400716417.9102,1586487761194.03,1586574805970.149,1586661850746.269,1586748895522.388,1586835940298.507,1586922985074.627,1587010029850.7458,1587097074626.8662,1587184119402.985,1587271164179.104,1587358208955.224,1587445253731.343,1587532298507.463,1587619343283.582,1587706388059.701,1587793432835.8208,1587880477611.94,1587967522388.06,1588054567164.1792,1588141611940.299,1588228656716.418,1588315701492.537,1588402746268.657,1588489791044.776,1588576835820.896,1588663880597.015,1588750925373.1338,1588837970149.2542,1588925014925.373,1589012059701.493,1589099104477.612,1589186149253.731,1589273194029.851,1589360238805.97,1589447283582.0898,1589534328358.209,1589621373134.328,1589708417910.448,1589795462686.5671,1589882507462.687,1589969552238.806,1590056597014.925,1590143641791.045,1590230686567.164,1590317731343.284,1590404776119.4028,1590491820895.5222,1590578865671.642,1590665910447.761,1590752955223.881,1590840000000.0,1590927044776.119,1591014089552.239,1591101134328.358,1591188179104.4778,1591275223880.5972,1591362268656.716,1591449313432.836,1591536358208.955,1591623402985.075,1591710447761.194,1591797492537.313,1591884537313.4329,1591971582089.552,1592058626865.672,1592145671641.791,1592232716417.9102,1592319761194.03,1592406805970.149,1592493850746.269,1592580895522.388,1592667940298.507,1592754985074.627,1592842029850.7458,1592929074626.8662,1593016119402.985,1593103164179.104,1593190208955.224,1593277253731.343,1593364298507.463,1593451343283.582,1593538388059.701,1593625432835.8208,1593712477611.94,1593799522388.06,1593886567164.1792,1593973611940.299,1594060656716.418,1594147701492.537,1594234746268.657,1594321791044.776,1594408835820.896,1594495880597.015,1594582925373.1338,1594669970149.2542,1594757014925.373,1594844059701.493,1594931104477.612,1595018149253.731,1595105194029.851,1595192238805.97,1595279283582.0898,1595366328358.209,1595453373134.328,1595540417910.448,1595627462686.5671,1595714507462.687,1595801552238.806,1595888597014.925,1595975641791.045,1596062686567.164,1596149731343.284,1596236776119.4028,1596323820895.5222,1596410865671.642,1596497910447.761,1596584955223.881,1596672000000.0],\"InfecModelo\":{\"__ndarray__\":\"AAAAAABQiUAyADuGxFmLQI+cfK+FjY1AxeGRVqPuj0DGNppDYUCRQN4Zw4/po5JAiC9H1goklEDm3sTuEMOVQAnJf7x2g5dAsVtn6OlnmUCJSEHCTnObQOEXePDEqJ1A+yDT5tUFoEC4FEXD00+hQN6+XEpTtKJA25ejxnM1pEAI8iG2f9WlQEdyUy3wlqdAOFYffHB8qUDkN90Y4oirQLQTsNZgv61AdUsftaMRsEDhosYkGlyxQH54K3IHwbJAofvgnIZCtECKAyHw3OK1QMltdTh9pLdABNFNNguKuUAndU5QX5a7QKRMeIGKzL1AeDRXSe0XwEBEHPlM72HBQE4OXt41xsJAkmPtJ9FGxED7jhml+eXFQE6M/P0SpsdACgWkFK+JyUACSQVCkZPLQDe3cLexxs1Aa4lgjSAT0EB9RhQj1lrRQMbqix9QvNJAM6D3Joc51ED0jFQnmNTVQLLA54vGj9dAp16+i35t2UAIyD98V3DbQI03yjkWm91AK2Cai6/w30CfH9lIJTrhQNDn2pKhlOJAmJxKF5YJ5EARk9nv6JrlQOrjXuKdSudAHlyMWdca6UDHWEko1w3rQKkhMjv/Je1AQzK28tFl70BexsMv+efwQPNvVQGSM/JAwJ7+KyWX80CyJ5PfMxT1QPrnZwNOrPZAS0XAGRFh+EA699HWJjT6QCcjI0ZDJ/xAgmAsfSI8/kBMMgjnQjoAQcQtZi4YaQFBeKwAknGrAkEk3HMbLAIEQar7qKwebgVBO1g14hbwBkHJUp2L1YgIQXYRfcMKOQpBSgsljlEBDEFa3FEVK+INQbWlx4D52w9BJv+iOH33EEE4zr2YoA0SQa0eC1dYMBNBsr+XqHpfFEFJoGdpv5oVQdO2+CG94RZB/CQDLuYzGEGOXmImhpAZQdTB46m/9hpBsXzgooplHEHfV+0es9sdQVfDbN7YVx9BlSbO3DdsIEHxSSZ34C0hQTolvK/27yFBYjghhHixIkHNIUqlU3EjQecW+D5oLiRBvjRBLIznJEE+vyywjpslQRTDfYs8SSZBNwIdWmTvJkG8d7Ur24wnQe2S5SeBIChBNNtuJUapKEGUgp8WLiYpQX8jbR5VlilBwEpFPPP4KUHbYltoX00qQV6HMxMSkypBPsMJ8KbJKkEyBc4L3vAqQYO5MRecCCtB/H2yBuoQK0EMtHr28wkrQbxJJnAH9CpBZzI0I5HPKkGscVolGp0qQSUvndVEXSpBqjtre8kQKkEhn0G8crgpQc5EaAAaVSlBbSGk3KPnKEGjezaa/HAoQS+/OuEU8idBEZyuqN5rJ0F/WWZdSt8mQXFEWl9ETSZBE4EKyrK2JUEES2WMcxwlQRqj1dtafyRBbHPZ5zHgI0HJVAnptT8jQV2zgGeXniJBA5qxy3n9IUEq+fgi81whQd3rOBiMvSBB\",\"dtype\":\"float64\",\"shape\":[135]},\"Infectados\":[810,862,1053,1223,1406,1451,1517,2339,2981,3506,4048,4466,4620,4866,5682,6708,7480,8216,8419,8755,8895,9371,11043,11568,12841,13894,14267,14580,15385,15914,16740,17826,20004,20715,21696,24041,26158,28698,30374,31174,31772,32187,34053,37853,39928,41830,44411,45444,46131,47719,51097,54286,58378,61183,62345,63066,65995,69859,73739,76871,80558,82161,83625,86017,86017],\"Mortes\":[40,48,58,68,84,98,113,136,164,188,219,260,275,304,371,428,496,540,560,588,608,695,778,853,928,991,1015,1037,1093,1134,1345,1512,1667,1700,1825,2049,2247,2375,2511,2586,2627,2654,2851,3045,3206,3416,3608,3709,3743,3949,4118,4315,4501,4688,4782,4823,5147,5363,5558,5773,6045,6163,6220,6423,6423],\"Removidos\":{\"__ndarray__\":\"AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPwAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADQl0AAAAAAANCXQAAAAAAA0JdAAAAAAADgzUAAAAAAgBvQQAAAAACAa9BAAAAAAEAt0UAAAAAAQC3RQA==\",\"dtype\":\"float64\",\"shape\":[65]},\"d\":[\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\"],\"ds\":[\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"01\",\"02\",\"03\",\"04\",\"06\"],\"m\":[\"03\",\"03\",\"03\",\"03\",\"03\",\"03\",\"03\",\"03\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\"],\"ms\":[\"03\",\"03\",\"03\",\"03\",\"03\",\"03\",\"03\",\"03\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"04\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"05\",\"06\",\"06\",\"06\",\"06\",\"06\",\"06\",\"06\",\"06\",\"06\",\"06\",\"06\",\"06\",\"06\",\"06\",\"06\",\"06\",\"06\",\"06\",\"06\",\"06\",\"06\",\"06\",\"06\",\"06\",\"06\",\"06\",\"06\",\"06\",\"06\",\"06\",\"07\",\"07\",\"07\",\"07\",\"07\",\"07\",\"07\",\"07\",\"07\",\"07\",\"07\",\"07\",\"07\",\"07\",\"07\",\"07\",\"07\",\"07\",\"07\",\"07\",\"07\",\"07\",\"07\",\"07\",\"07\",\"07\",\"07\",\"07\",\"07\",\"07\",\"07\",\"08\",\"08\",\"08\",\"08\",\"08\"],\"yys},\"selected\":{\"id\":\"1493\"},\"selection_policy\":{\"id\":\"1494\"}},\"id\":\"1426\",\"type\":\"ColumnDataSource\"},{\"attributes\":{\"source\":{\"id\":\"1426\"}},\"id\":\"1500\",\"type\":\"CDSView\"},{\"attributes\":{\"base\":60,\"mantissas\":[1,2,5,10,15,20,30],\"max_interval\":1800000.0,\"min_interval\":1000.0,\"num_minor_ticks\":0},\"id\":\"1458\",\"type\":\"AdaptiveTicker\"},{\"attributes\":{\"line_cap\":\"round\",\"line_color\":\"#ffd885\",\"line_width\":3,\"x\":{\"field\":\"Data\"},\"y\":{\"field\":\"Infectados\"}},\"id\":\"1448\",\"type\":\"Line\"},{\"attributes\":{\"source\":{\"id\":\"1426\"}},\"id\":\"1525\",\"type\":\"CDSView\"},{\"attributes\":{\"base\":24,\"mantissas\":[1,2,4,6,8,12],\"max_interval\":43200000.0,\"min_interval\":3600000.0,\"num_minor_ticks\":0},\"id\":\"1459\",\"type\":\"AdaptiveTicker\"},{\"attributes\":{\"days\":[1,4,7,10,13,16,19,22,25,28]},\"id\":\"1461\",\"type\":\"DaysTicker\"},{\"attributes\":{},\"id\":\"1453\",\"type\":\"DatetimeTickFormatter\"},{\"attributes\":{\"data_source\":{\"id\":\"1426\"},\"glyph\":{\"id\":\"1522\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1523\"},\"selection_glyph\":null,\"view\":{\"id\":\"1525\"}},\"id\":\"1524\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"days\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]},\"id\":\"1460\",\"type\":\"DaysTicker\"},{\"attributes\":{\"line_alpha\":0.1,\"line_cap\":\"round\",\"line_color\":\"#99d594\",\"line_width\":3,\"x\":{\"field\":\"Data\"},\"y\":{\"field\":\"Removidos\"}},\"id\":\"1498\",\"type\":\"Line\"},{\"attributes\":{},\"id\":\"1430\",\"type\":\"DataRange1d\"},{\"attributes\":{\"line_cap\":\"round\",\"line_color\":\"#de425b\",\"line_width\":3,\"x\":{\"field\":\"Data\"},\"y\":{\"field\":\"Mortes\"}},\"id\":\"1472\",\"type\":\"Line\"},{\"attributes\":{\"days\":[1,8,15,22]},\"id\":\"1462\",\"type\":\"DaysTicker\"},{\"attributes\":{\"line_alpha\":0.1,\"line_cap\":\"round\",\"line_color\":\"#f57f17\",\"line_dash\":[6],\"line_width\":4,\"x\":{\"field\":\"DataModelo\"},\"y\":{\"field\":\"InfecModelo\"}},\"id\":\"1523\",\"type\":\"Line\"},{\"attributes\":{\"days\":[1,15]},\"id\":\"1463\",\"type\":\"DaysTicker\"},{\"attributes\":{\"data_source\":{\"id\":\"1426\"},\"glyph\":{\"id\":\"1497\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1498\"},\"selection_glyph\":null,\"view\":{\"id\":\"1500\"}},\"id\":\"1499\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"label\":{\"value\":\"Infectados - Modelo\"},\"renderers\":[{\"id\":\"1524\"}]},\"id\":\"1545\",\"type\":\"LegendItem\"},{\"attributes\":{\"months\":[0,1,2,3,4,5,6,7,8,9,10,11]},\"id\":\"1464\",\"type\":\"MonthsTicker\"},{\"attributes\":{},\"id\":\"1432\",\"type\":\"DataRange1d\"},{\"attributes\":{\"label\":{\"value\":\"Removidos\"},\"renderers\":[{\"id\":\"1499\"}]},\"id\":\"1520\",\"type\":\"LegendItem\"},{\"attributes\":{\"months\":[0,2,4,6,8,10]},\"id\":\"1465\",\"type\":\"MonthsTicker\"},{\"attributes\":{\"line_cap\":\"round\",\"line_color\":\"#f57f17\",\"line_dash\":[6],\"line_width\":4,\"x\":{\"field\":\"DataModelo\"},\"y\":{\"field\":\"InfecModelo\"}},\"id\":\"1522\",\"type\":\"Line\"},{\"attributes\":{\"source\":{\"id\":\"1426\"}},\"id\":\"1451\",\"type\":\"CDSView\"},{\"attributes\":{\"months\":[0,4,8]},\"id\":\"1466\",\"type\":\"MonthsTicker\"},{\"attributes\":{},\"id\":\"1436\",\"type\":\"LogScale\"},{\"attributes\":{\"line_cap\":\"round\",\"line_color\":\"#99d594\",\"line_width\":3,\"x\":{\"field\":\"Data\"},\"y\":{\"field\":\"Removidos\"}},\"id\":\"1497\",\"type\":\"Line\"},{\"attributes\":{\"data_source\":{\"id\":\"1426\"},\"glyph\":{\"id\":\"1448\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1449\"},\"selection_glyph\":null,\"view\":{\"id\":\"1451\"}},\"id\":\"1450\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"months\":[0,6]},\"id\":\"1467\",\"type\":\"MonthsTicker\"},{\"attributes\":{\"axis_label\":\"Dias\",\"formatter\":{\"id\":\"1453\"},\"ticker\":{\"id\":\"1439\"}},\"id\":\"1438\",\"type\":\"DatetimeAxis\"},{\"attributes\":{\"axis\":{\"id\":\"1442\"},\"band_fill_alpha\":0.1,\"band_fill_color\":\"olive\",\"dimension\":1,\"grid_line_alpha\":0,\"ticker\":null},\"id\":\"1445\",\"type\":\"Grid\"},{\"attributes\":{},\"id\":\"1468\",\"type\":\"YearsTicker\"},{\"attributes\":{\"num_minor_ticks\":5,\"tickers\":[{\"id\":\"1457\"},{\"id\":\"1458\"},{\"id\":\"1459\"},{\"id\":\"1460\"},{\"id\":\"1461\"},{\"id\":\"1462\"},{\"id\":\"1463\"},{\"id\":\"1464\"},{\"id\":\"1465\"},{\"id\":\"1466\"},{\"id\":\"1467\"},{\"id\":\"1468\"}]},\"id\":\"1439\",\"type\":\"DatetimeTicker\"},{\"attributes\":{\"label\":{\"value\":\"Infectados\"},\"renderers\":[{\"id\":\"1450\"}]},\"id\":\"1470\",\"type\":\"LegendItem\"},{\"attributes\":{\"label\":{\"value\":\"Mortes\"},\"renderers\":[{\"id\":\"1474\"}]},\"id\":\"1495\",\"type\":\"LegendItem\"},{\"attributes\":{\"axis\":{\"id\":\"1438\"},\"grid_line_alpha\":0,\"ticker\":null},\"id\":\"1441\",\"type\":\"Grid\"},{\"attributes\":{\"line_alpha\":0.1,\"line_cap\":\"round\",\"line_color\":\"#ffd885\",\"line_width\":3,\"x\":{\"field\":\"Data\"},\"y\":{\"field\":\"Infectados\"}},\"id\":\"1449\",\"type\":\"Line\"},{\"attributes\":{\"line_alpha\":0.1,\"line_cap\":\"round\",\"line_color\":\"#de425b\",\"line_width\":3,\"x\":{\"field\":\"Data\"},\"y\":{\"field\":\"Mortes\"}},\"id\":\"1473\",\"type\":\"Line\"},{\"attributes\":{\"num_minor_ticks\":10},\"id\":\"1443\",\"type\":\"LogTicker\"},{\"attributes\":{\"source\":{\"id\":\"1426\"}},\"id\":\"1475\",\"type\":\"CDSView\"},{\"attributes\":{\"axis_label\":\"Indiv\\u00edduos\",\"formatter\":{\"id\":\"1455\"},\"ticker\":{\"id\":\"1443\"}},\"id\":\"1442\",\"type\":\"LogAxis\"},{\"attributes\":{\"click_policy\":\"hide\",\"items\":[{\"id\":\"1470\"},{\"id\":\"1495\"},{\"id\":\"1520\"},{\"id\":\"1545\"}],\"location\":\"bottom_right\"},\"id\":\"1469\",\"type\":\"Legend\"},{\"attributes\":{\"data_source\":{\"id\":\"1426\"},\"glyph\":{\"id\":\"1472\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1473\"},\"selection_glyph\":null,\"view\":{\"id\":\"1475\"}},\"id\":\"1474\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"mantissas\":[1,2,5],\"max_interval\":500.0,\"num_minor_ticks\":0},\"id\":\"1457\",\"type\":\"AdaptiveTicker\"},{\"attributes\":{\"ticker\":null},\"id\":\"1455\",\"type\":\"LogTickFormatter\"},{\"attributes\":{},\"id\":\"1494\",\"type\":\"UnionRenderers\"},{\"attributes\":{\"active_drag\":\"auto\",\"active_inspect\":\"auto\",\"active_multi\":null,\"active_scroll\":\"auto\",\"active_tap\":\"auto\",\"tools\":[{\"id\":\"1546\"}]},\"id\":\"1446\",\"type\":\"Toolbar\"}],\"root_ids\":[\"1427\"]},\"title\":\"Bokeh Application\",\"version\":\"2.0.1\"}};\n",
       "  var render_items = [{\"docid\":\"977c95e1-39da-423b-b7b3-c8e424f26bca\",\"root_ids\":[\"1427\"],\"roots\":{\"1427\":\"195f9fba-c016-4397-b0d8-06ad26ac25fa\"}}];\n",
       "  root.Bokeh.embed.embed_items_notebook(docs_json, render_items);\n",
       "\n",
       "  }\n",
       "  if (root.Bokeh !== undefined) {\n",
       "    embed_document(root);\n",
       "  } else {\n",
       "    var attempts = 0;\n",
       "    var timer = setInterval(function(root) {\n",
       "      if (root.Bokeh !== undefined) {\n",
       "        clearInterval(timer);\n",
       "        embed_document(root);\n",
       "      } else {\n",
       "        attempts++;\n",
       "        if (attempts > 100) {\n",
       "          clearInterval(timer);\n",
       "          console.log(\"Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing\");\n",
       "        }\n",
       "      }\n",
       "    }, 10, root)\n",
       "  }\n",
       "})(window);"
      ],
      "application/vnd.bokehjs_exec.v0+json": ""
     },
     "metadata": {
      "application/vnd.bokehjs_exec.v0+json": {
       "id": "1427"
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# Criando os valores de tempo para previs√£o - 70 dias\n",
    "t_sim = np.linspace(0, len(I) + 70, len(I) + 70)\n",
    "date_vec_sim = [first_date + timedelta(days=k) for k in t_sim]\n",
    "\n",
    "# Prevendo para os valores selecionados\n",
    "prediction = sir_model.predict(initial, t_sim)\n",
    "\n",
    "\n",
    "\n",
    "# Criando o gr√°fico com as predi√ß√µes\n",
    "\n",
    "# Criando os valores para legenda no plot\n",
    "year_sim =  [str(int(d.year)) for d in date_vec_sim ]\n",
    "month_sim = [(\"0\"+str(int(d.month)))[-2:] for d in date_vec_sim ]\n",
    "day_sim =   [(\"0\"+str(int(d.day)))[-2:] for d in date_vec_sim ]\n",
    "\n",
    "# Criando a fonte de dados\n",
    "if r_included:\n",
    "    source = ColumnDataSource(data={\n",
    "        'Data'       : date_vec,\n",
    "        'd': day, 'm': month, 'y': year,\n",
    "        'Infectados' : I,\n",
    "        'Removidos'  : R,\n",
    "        'Mortes'     : M,\n",
    "        'InfecModelo' : prediction[1],\n",
    "        'RemovModelo' : prediction[2],\n",
    "        'DataModelo'  : date_vec_sim,\n",
    "        'ds': day_sim, 'ms': month_sim, 'ys': year_sim\n",
    "    })\n",
    "else:\n",
    "    source = ColumnDataSource(data={\n",
    "        'Data'       : date_vec,\n",
    "        'd': day, 'm': month, 'y': year,\n",
    "        'Infectados' : I,\n",
    "        'Removidos'  : R,\n",
    "        'Mortes'     : M,\n",
    "        'InfecModelo' : prediction[1],\n",
    "        'DataModelo'  : date_vec_sim,\n",
    "        'ds': day_sim, 'ms': month_sim, 'ys': year_sim\n",
    "    })\n",
    "\n",
    "    \n",
    "# Criando a figura\n",
    "p = figure(plot_height=500,\n",
    "           plot_width=600,\n",
    "           x_axis_type=\"datetime\", \n",
    "           tools=\"\", \n",
    "           toolbar_location=None,\n",
    "           y_axis_type=\"log\",\n",
    "           title=\"Previs√£o do COVID - Brasil\")\n",
    "\n",
    "# Preparando o estilo\n",
    "p.grid.grid_line_alpha = 0\n",
    "p.ygrid.band_fill_color = \"olive\"\n",
    "p.ygrid.band_fill_alpha = 0.1\n",
    "p.yaxis.axis_label = \"Indiv√≠duos\"\n",
    "p.xaxis.axis_label = \"Dias\"\n",
    "\n",
    "# Incluindo as curvas\n",
    "i_p = p.line(x='Data', y='Infectados', legend_label=\"Infectados\", line_cap=\"round\", line_width=3, color=\"#ffd885\", source=source)\n",
    "m_p = p.line(x='Data', y='Mortes', legend_label=\"Mortes\", line_cap=\"round\", line_width=3, color=\"#de425b\", source=source)\n",
    "r_p = p.line(x='Data', y='Removidos', legend_label=\"Removidos\", line_cap=\"round\", line_width=3, color=\"#99d594\", source=source)\n",
    "\n",
    "mp_p = p.line(x='DataModelo', y='InfecModelo', legend_label=\"Infectados - Modelo\", line_dash=\"dashed\", line_cap=\"round\", line_width=4, color=\"#f57f17\", source=source)\n",
    "\n",
    "renders = [i_p, m_p, r_p, mp_p]\n",
    "\n",
    "if r_included:\n",
    "    rp_p = p.line(x='DataModelo', y='RemovModelo', legend_label=\"Removidos - Modelo\", line_dash=\"dashed\", line_cap=\"round\", line_width=4, color=\"#1b5e20\", source=source)\n",
    "    renders.append(rp_p)\n",
    "    \n",
    "# Colocando as legendas\n",
    "p.legend.click_policy=\"hide\"\n",
    "p.legend.location = \"bottom_right\"\n",
    "\n",
    "# Incluindo a ferramenta de hover\n",
    "p.add_tools(HoverTool(\n",
    "    tooltips=[\n",
    "        ( 'Indiv√≠duos', '$y{0.00 a}' ),\n",
    "        ( 'Data',       '@ds/@ms/@ys'),\n",
    "    ],\n",
    "    renderers=renders\n",
    "))\n",
    "\n",
    "show(p)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Refer√™ncias\n",
    "\n",
    "\n",
    "- [Predictive Monitoring of COVID-19](https://ddi.sutd.edu.sg)\n",
    "\n",
    "- [Apple mobility data](https://www.apple.com/covid19/mobility)\n",
    "\n",
    "- [Corona Virus - Brazil Data](https://painel.covid19br.org)\n",
    "\n",
    "- [Fitting model to Corona Virus](https://towardsdatascience.com/infectious-disease-modelling-fit-your-model-to-coronavirus-data-2568e672dbc7)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
